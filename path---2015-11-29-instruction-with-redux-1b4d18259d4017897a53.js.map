{"version":3,"sources":["webpack:///path---2015-11-29-instruction-with-redux-1b4d18259d4017897a53.js","webpack:///./.cache/json/2015-11-29-instruction-with-redux.json"],"names":["webpackJsonp","349","module","exports","data","site","siteMetadata","title","author","siteUrl","disqusShortname","markdownRemark","id","html","excerpt","fields","slug","frontmatter","date","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,WAAAC,OAAA,UAAAC,QAAA,uBAAAC,gBAAA,gBAAwGC,gBAAmBC,GAAA,6HAAAC,KAAA,8vXAA8hVC,QAAA,0IAAAC,QAA66DC,KAAA,uCAA6CC,aAAgBV,MAAA,qCAAAW,KAAA,uBAA0EC,aAAgBH,KAAA","file":"path---2015-11-29-instruction-with-redux-1b4d18259d4017897a53.js","sourcesContent":["webpackJsonp([251941979200700],{\n\n/***/ 349:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"JIGSAWYE\",\"author\":\"Evan Ye\",\"siteUrl\":\"https://jigsawye.com\",\"disqusShortname\":\"jigsawnotes\"}},\"markdownRemark\":{\"id\":\"/Users/jigsawye/projects/gatsby-blog/content/posts/2015-11-29-instruction-with-redux.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>真正開始寫 <a href=\\\"https://facebook.github.io/react/\\\">React</a> 大概是這一兩個月的時間吧，印象中前幾個月正火紅的時候，觀望著開發架構，從 Facebook 剛開始的 <a href=\\\"https://github.com/facebook/flux\\\">Flux</a>，一路看到 <a href=\\\"https://github.com/BinaryMuse/fluxxor\\\">fluxxor</a>、<a href=\\\"https://github.com/goatslacker/alt\\\">alt</a> 這些 Library 等等，真的是多到爆，然後那個 Flux 的概念圖看了不下 N 次，但還是不得其門而入。</p>\\n<p>直到不久前出現了一個叫 <a href=\\\"github.com/rackt/redux\\\">Redux</a> 的東西，剛好有新 project 要用 React 寫，看著各方大神推薦就順勢跳進 Redux 的世界了。最近也利用 Redux 寫了個 <a href=\\\"https://github.com/jigsawye/node-proxy-manager-client\\\">Proxy manager</a>，趁最近期中考完，回頭寫一下 Redux 的核心概念。</p>\\n<!-- more -->\\n<!-- toc -->\\n<h3 id=\\\"那些在-react-遇到的麻煩事\\\"><a href=\\\"#%E9%82%A3%E4%BA%9B%E5%9C%A8-react-%E9%81%87%E5%88%B0%E7%9A%84%E9%BA%BB%E7%85%A9%E4%BA%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>那些在 React 遇到的麻煩事</h3>\\n<p>你會有個 Root Component，然後它負責：</p>\\n<ul>\\n<li>有一株肥美的 state tree（狀態樹）管理下層元件的資料</li>\\n<li>有一坨負責處理資料的 function 透過 props 傳遞給下層元件呼叫，以改變上面那棵樹</li>\\n</ul>\\n<p>所以呢，Facebook 就建議了一種 Flux 架構，把那些 function 及 state tree 給抽出來集中管理。</p>\\n<h3 id=\\\"為什麼選-redux\\\"><a href=\\\"#%E7%82%BA%E4%BB%80%E9%BA%BC%E9%81%B8-redux\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>為什麼選 Redux</h3>\\n<p>以我來說有這幾個原因：</p>\\n<ul>\\n<li>概念很簡單，只要清楚 Actions 及 Reducer 就可以開始實做了</li>\\n<li>API 很少，而且只是幾個單純的 function，還有很方便的 Middleware 可以用</li>\\n<li>有完善的 devtools，可回溯的 state</li>\\n<li>社群資源多，而且我觀察台灣大多數 React 開發者都選用 Redux</li>\\n<li>官方文件有中文版（<a href=\\\"http://chentsulin.github.io/redux/\\\">由此去</a>），而且有完整的 step by step example</li>\\n</ul>\\n<h3 id=\\\"所以那個流程\\\"><a href=\\\"#%E6%89%80%E4%BB%A5%E9%82%A3%E5%80%8B%E6%B5%81%E7%A8%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>所以那個流程</h3>\\n<p>我以很常見的 counter（計數器）為例，假設我要將目前的數字 + 1：</p>\\n<ul>\\n<li>dispatch（發送）一個 increment（+ 1）的 Action（動作）</li>\\n<li>管理 counter 的 reducer 接收到 action 後將 state 中目前的數字 + 1</li>\\n<li>state tree 及 reducers 由 store 集中管理，並由 React 取用</li>\\n</ul>\\n<h6 id=\\\"action\\\"><a href=\\\"#action\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Action</h6>\\n<p>就以剛剛的 Todo 為例，actions 基本上就只是一個 JavaScript 物件，只需要定義好這個 action 的 type（類型）即可，當這個 action 被 dispatch 時，這個物件就會被傳至 reudcer，所以若有資料需要傳入，只需要加在這個 action 物件中：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'INCREMENT'</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>一般來說會向下方這樣把 type 定義成常數做取用，不過這邊就盡量精簡化了：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">INCREMENT</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'INCREMENT'</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h6 id=\\\"reducer\\\"><a href=\\\"#reducer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reducer</h6>\\n<p>reducer 則是一個 function，負責接收被 dispatch 的 action 並處理 state，要注意的是需傳入兩個參數到這個 function，第一個是目前的 state，第二個則是我們定義的 action 物件：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">counter</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 在這邊回傳處理好的 state</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>就是這麼簡單的 function，要注意的是，初始化的時候 state 是空的，所以在第一個參數放了預設的 state。\\n接著就是撰寫處理 state 的部分：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">counter</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">switch</span> <span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'INCREMENT'</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">return</span> state <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>還記得在 action 定義的 type 吧？我們會在 reducer 中根據 action 物件中的 type 去對應要執行的動作，接著回傳處理完的 state。</p>\\n<h6 id=\\\"store\\\"><a href=\\\"#store\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Store</h6>\\n<p>我們現在知道了定義的 action 及處理 state 的 reducer，最後我們則需要透過 redux 的 <code class=\\\"language-text\\\">createStore</code> 將 reducer 轉換成 store：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createStore <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 如果透過瀏覽器的方式執行的話可以寫成下面這樣</span>\\n<span class=\\\"token comment\\\">// const { createStore } = Redux;</span>\\n\\n<span class=\\\"token comment\\\">// 產生 store</span>\\n<span class=\\\"token keyword\\\">let</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createStore</span><span class=\\\"token punctuation\\\">(</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>對，就這麼一行，接著你就可以開始透過 action 操作 state 了：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 透過 getState() 取得目前的 state</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 透過 dispatch() 發送我們剛剛所定義的 action</span>\\nstore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'INCREMENT'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 看執行後的 state</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"done\\\"><a href=\\\"#done\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Done!</h3>\\n<p>想像一下，Redux 就是個超級狀態機，藉由我們定義的 action 去改變 state。而我們只用了 Redux 提供的 <code class=\\\"language-text\\\">createStore()</code> 產生 store，API 相當簡單。上面的程式我放在 <a href=\\\"http://jsbin.com/conezo/edit?js,console\\\">jsbin</a> 上，點右上角的 run 即可看執行的結果。搞懂基本概念後，接著可以去查看<a href=\\\"http://rackt.org/redux/docs/basics/Actions.html\\\">官方文件的 Todo Example</a>，或是 Redux 的 Creator <a href=\\\"https://github.com/gaearon\\\">Dan Abramov</a> 在 egghead 上的<a href=\\\"https://egghead.io/lessons/javascript-redux-the-single-immutable-state-tree?series=getting-started-with-redux\\\">影片教學</a>。</p>\\n<h3 id=\\\"references\\\"><a href=\\\"#references\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>References</h3>\\n<ul>\\n<li><a href=\\\"http://rackt.org/redux/\\\">http://rackt.org/redux/</a></li>\\n</ul>\",\"excerpt\":\"真正開始寫  React  大概是這一兩個月的時間吧，印象中前幾個月正火紅的時候，觀望著開發架構，從 Facebook 剛開始的  Flux ，一路看到  fluxxor 、 alt  這些 Library 等等，真的是多到爆，然後那個 Flux 的概念圖看了不下 N…\",\"fields\":{\"slug\":\"/2015/11/29/instruction-with-redux/\"},\"frontmatter\":{\"title\":\"Redux 起手式：Actions、Reducers 及 Store\",\"date\":\"November 29, 2015\"}}},\"pathContext\":{\"slug\":\"/2015/11/29/instruction-with-redux/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2015-11-29-instruction-with-redux-1b4d18259d4017897a53.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"JIGSAWYE\",\"author\":\"Evan Ye\",\"siteUrl\":\"https://jigsawye.com\",\"disqusShortname\":\"jigsawnotes\"}},\"markdownRemark\":{\"id\":\"/Users/jigsawye/projects/gatsby-blog/content/posts/2015-11-29-instruction-with-redux.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>真正開始寫 <a href=\\\"https://facebook.github.io/react/\\\">React</a> 大概是這一兩個月的時間吧，印象中前幾個月正火紅的時候，觀望著開發架構，從 Facebook 剛開始的 <a href=\\\"https://github.com/facebook/flux\\\">Flux</a>，一路看到 <a href=\\\"https://github.com/BinaryMuse/fluxxor\\\">fluxxor</a>、<a href=\\\"https://github.com/goatslacker/alt\\\">alt</a> 這些 Library 等等，真的是多到爆，然後那個 Flux 的概念圖看了不下 N 次，但還是不得其門而入。</p>\\n<p>直到不久前出現了一個叫 <a href=\\\"github.com/rackt/redux\\\">Redux</a> 的東西，剛好有新 project 要用 React 寫，看著各方大神推薦就順勢跳進 Redux 的世界了。最近也利用 Redux 寫了個 <a href=\\\"https://github.com/jigsawye/node-proxy-manager-client\\\">Proxy manager</a>，趁最近期中考完，回頭寫一下 Redux 的核心概念。</p>\\n<!-- more -->\\n<!-- toc -->\\n<h3 id=\\\"那些在-react-遇到的麻煩事\\\"><a href=\\\"#%E9%82%A3%E4%BA%9B%E5%9C%A8-react-%E9%81%87%E5%88%B0%E7%9A%84%E9%BA%BB%E7%85%A9%E4%BA%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>那些在 React 遇到的麻煩事</h3>\\n<p>你會有個 Root Component，然後它負責：</p>\\n<ul>\\n<li>有一株肥美的 state tree（狀態樹）管理下層元件的資料</li>\\n<li>有一坨負責處理資料的 function 透過 props 傳遞給下層元件呼叫，以改變上面那棵樹</li>\\n</ul>\\n<p>所以呢，Facebook 就建議了一種 Flux 架構，把那些 function 及 state tree 給抽出來集中管理。</p>\\n<h3 id=\\\"為什麼選-redux\\\"><a href=\\\"#%E7%82%BA%E4%BB%80%E9%BA%BC%E9%81%B8-redux\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>為什麼選 Redux</h3>\\n<p>以我來說有這幾個原因：</p>\\n<ul>\\n<li>概念很簡單，只要清楚 Actions 及 Reducer 就可以開始實做了</li>\\n<li>API 很少，而且只是幾個單純的 function，還有很方便的 Middleware 可以用</li>\\n<li>有完善的 devtools，可回溯的 state</li>\\n<li>社群資源多，而且我觀察台灣大多數 React 開發者都選用 Redux</li>\\n<li>官方文件有中文版（<a href=\\\"http://chentsulin.github.io/redux/\\\">由此去</a>），而且有完整的 step by step example</li>\\n</ul>\\n<h3 id=\\\"所以那個流程\\\"><a href=\\\"#%E6%89%80%E4%BB%A5%E9%82%A3%E5%80%8B%E6%B5%81%E7%A8%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>所以那個流程</h3>\\n<p>我以很常見的 counter（計數器）為例，假設我要將目前的數字 + 1：</p>\\n<ul>\\n<li>dispatch（發送）一個 increment（+ 1）的 Action（動作）</li>\\n<li>管理 counter 的 reducer 接收到 action 後將 state 中目前的數字 + 1</li>\\n<li>state tree 及 reducers 由 store 集中管理，並由 React 取用</li>\\n</ul>\\n<h6 id=\\\"action\\\"><a href=\\\"#action\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Action</h6>\\n<p>就以剛剛的 Todo 為例，actions 基本上就只是一個 JavaScript 物件，只需要定義好這個 action 的 type（類型）即可，當這個 action 被 dispatch 時，這個物件就會被傳至 reudcer，所以若有資料需要傳入，只需要加在這個 action 物件中：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'INCREMENT'</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>一般來說會向下方這樣把 type 定義成常數做取用，不過這邊就盡量精簡化了：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">INCREMENT</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'INCREMENT'</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h6 id=\\\"reducer\\\"><a href=\\\"#reducer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reducer</h6>\\n<p>reducer 則是一個 function，負責接收被 dispatch 的 action 並處理 state，要注意的是需傳入兩個參數到這個 function，第一個是目前的 state，第二個則是我們定義的 action 物件：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">counter</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 在這邊回傳處理好的 state</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>就是這麼簡單的 function，要注意的是，初始化的時候 state 是空的，所以在第一個參數放了預設的 state。\\n接著就是撰寫處理 state 的部分：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">counter</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">switch</span> <span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'INCREMENT'</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">return</span> state <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>還記得在 action 定義的 type 吧？我們會在 reducer 中根據 action 物件中的 type 去對應要執行的動作，接著回傳處理完的 state。</p>\\n<h6 id=\\\"store\\\"><a href=\\\"#store\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Store</h6>\\n<p>我們現在知道了定義的 action 及處理 state 的 reducer，最後我們則需要透過 redux 的 <code class=\\\"language-text\\\">createStore</code> 將 reducer 轉換成 store：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createStore <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 如果透過瀏覽器的方式執行的話可以寫成下面這樣</span>\\n<span class=\\\"token comment\\\">// const { createStore } = Redux;</span>\\n\\n<span class=\\\"token comment\\\">// 產生 store</span>\\n<span class=\\\"token keyword\\\">let</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createStore</span><span class=\\\"token punctuation\\\">(</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>對，就這麼一行，接著你就可以開始透過 action 操作 state 了：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 透過 getState() 取得目前的 state</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 透過 dispatch() 發送我們剛剛所定義的 action</span>\\nstore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'INCREMENT'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 看執行後的 state</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"done\\\"><a href=\\\"#done\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Done!</h3>\\n<p>想像一下，Redux 就是個超級狀態機，藉由我們定義的 action 去改變 state。而我們只用了 Redux 提供的 <code class=\\\"language-text\\\">createStore()</code> 產生 store，API 相當簡單。上面的程式我放在 <a href=\\\"http://jsbin.com/conezo/edit?js,console\\\">jsbin</a> 上，點右上角的 run 即可看執行的結果。搞懂基本概念後，接著可以去查看<a href=\\\"http://rackt.org/redux/docs/basics/Actions.html\\\">官方文件的 Todo Example</a>，或是 Redux 的 Creator <a href=\\\"https://github.com/gaearon\\\">Dan Abramov</a> 在 egghead 上的<a href=\\\"https://egghead.io/lessons/javascript-redux-the-single-immutable-state-tree?series=getting-started-with-redux\\\">影片教學</a>。</p>\\n<h3 id=\\\"references\\\"><a href=\\\"#references\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>References</h3>\\n<ul>\\n<li><a href=\\\"http://rackt.org/redux/\\\">http://rackt.org/redux/</a></li>\\n</ul>\",\"excerpt\":\"真正開始寫  React  大概是這一兩個月的時間吧，印象中前幾個月正火紅的時候，觀望著開發架構，從 Facebook 剛開始的  Flux ，一路看到  fluxxor 、 alt  這些 Library 等等，真的是多到爆，然後那個 Flux 的概念圖看了不下 N…\",\"fields\":{\"slug\":\"/2015/11/29/instruction-with-redux/\"},\"frontmatter\":{\"title\":\"Redux 起手式：Actions、Reducers 及 Store\",\"date\":\"November 29, 2015\"}}},\"pathContext\":{\"slug\":\"/2015/11/29/instruction-with-redux/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2015-11-29-instruction-with-redux.json\n// module id = 349\n// module chunks = 251941979200700"],"sourceRoot":""}