{"data":{"site":{"siteMetadata":{"title":"JIGSAWYE","description":"個人筆記及教學空間，包含了 PHP / Laravel、JavaScript / React.js、DevOps 等等⋯⋯，及一些雜七雜八的記錄。","siteUrl":"https://jigsawye.com"}},"allMarkdownRemark":{"edges":[{"node":{"html":"<p>幾週前 React 發佈了 <a href=\"https://reactjs.org/blog/2018/10/23/react-v-16-6.html\">16.6</a>，一口氣推出了 <code class=\"language-text\">lazy</code>、<code class=\"language-text\">memo</code> 及 <code class=\"language-text\">contextType</code> 等新功能。而其中的 <code class=\"language-text\">React.memo</code> 就是過去 <code class=\"language-text\">React.PureComponent</code> 的 HOC 版本。</p>\n<!-- more -->\n<p>過去只要讓 Component 的 <code class=\"language-text\">shouldComponentUpdate</code> 自動進行 shallow equal 比對進行 re-render，只要把 class component 的 <code class=\"language-text\">extends React.Component</code> 部分改為 <code class=\"language-text\">extends React.PureComponent</code> 即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted\">- class Demo extends React.Component {</span>\n<span class=\"token inserted\">+ class Demo extends React.PureComponent {</span>\n    // Something else...\n\n    render() {\n      return &lt;div>Demo&lt;/div>;\n    }\n  }</code></pre></div>\n<p>但假設 Component 是個 function component，那就必須改寫成單單只有 <code class=\"language-text\">render</code> function 的 class component，整體看起來會相當的不直觀：</p>","fields":{"slug":"/2018/11/30/advanced-react-memo/"},"frontmatter":{"date":"2018-11-30T12:00:00.000Z","title":"React.memo 的進階使用"}}},{"node":{"html":"<p>在前些日子 GraphQL 界知名的 <a href=\"https://blog.apollographql.com/announcing-apollo-server-2-2b69fb4702ce\">Apollo 發佈了 Apollo Server 2</a>，這個版本其中一個特色就是加強了開發體驗。透過內建 server 減少開發上繁瑣的設定，比起前個版本，寫一個 hello world 的 demo 不再需要花費大量的時間。本文大部分內容都來自於<a href=\"https://www.apollographql.com/docs/apollo-server/getting-started.html\">官方的 Getting Started</a>，經過整理與翻譯過後發布。</p>\n<!-- more -->\n<p>閱讀完本文之後，你將會得到以下幾點：</p>\n<ul>\n<li>一個基礎的 GraphQL server，你可以基於此打造更複雜的 server</li>\n<li>了解 GraphQL 的基本原理</li>\n<li>使用 GraphQL Playground 發送 query 及查看 response</li>\n</ul>\n<p>為了確保過程無虞，請具備基礎的 JavaScript 的知識及版本 6 以上的 Node.js 後再繼續。</p>\n<h2 id=\"step-1：初始化-project\"><a href=\"#step-1%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96-project\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1：初始化 project</h2>\n<p>在此步驟中，我們會透過你的 terminal（e.g. Terminal, iTerm, PowerShell）建立名為 <code class=\"language-text\">graphql-server-example</code> 的資料夾，並建立簡單的 Node.js \b 程式。本步只是為了後續的操作作準備，將會在 \b terminal 及 editor 來回作切換</p>\n<p>首先，使用 mkdir 指令建立一個名為 graphql-server-example 的資料夾。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> graphql-server-example</code></pre></div>\n<p>進入資料夾。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> graphql-server-example</code></pre></div>\n<p>使用 Node.js 的 npm 初始化資料夾</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init --yes</code></pre></div>\n<blockquote>\n<p>我們使用 Node.js 預設的套件管理器 npm。其他套件管理器如 yarn 也有提供類似的功能，不過本篇不會介紹。</p>\n</blockquote>\n<p>上述步驟執行完成後，資料夾內應該會產生 <code class=\"language-text\">package.json</code>，你可以使用 <code class=\"language-text\">ls</code> 來檢視並確認。</p>\n<h2 id=\"step-2：安裝-dependencies\"><a href=\"#step-2%EF%BC%9A%E5%AE%89%E8%A3%9D-dependencies\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2：安裝 dependencies</h2>\n<p>接著，我們要安裝兩個用來建立 GraphQL request 的 response 所需的 dependencies：</p>\n<ul>\n<li><a href=\"https://npm.im/apollo-server\">apollo-server</a>：Apollo server 套件讓你可以定義資料型態及獲取方式。</li>\n<li><a href=\"https://npm.im/graphql\">graphql</a>：本套件讓你建構並查詢 schema。</li>\n</ul>\n<blockquote>\n<p>Note：本教學中不會使用 <code class=\"language-text\">graphql</code>，會單獨安裝是因為它是 Apollo Server 的 peer dependency。</p>\n</blockquote>\n<p>雖然你可以自己寫所有必須的 code，但這兩個依賴會讓你在建構 GraphQL server 時容易許多，且在各種大小型的 application 中相當常見。</p>\n<p>執行以下指令將 dependencies 安裝並儲存在 project 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save apollo-server graphql</code></pre></div>\n<p>在下個步驟我們將會使用這些 dependencies 來建構處理 GraphQL requests 並 response 的 server。</p>\n<h2 id=\"step-3：建立-server\"><a href=\"#step-3%EF%BC%9A%E5%BB%BA%E7%AB%8B-server\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3：建立 server</h2>\n<p>在此步驟中，我們會提供一個 code block，用於設定 <code class=\"language-text\">apollo-server</code> 來處理 GraphQL requests 並 response。為了加快速度，我們希望你將這 code 複製並貼入你專案的 <code class=\"language-text\">index.js</code> 中。在讀這些 code 時，你可以透過這些有幫助的註解來理解 GraphQL 的核心概念。不用太擔心是否會漏掉一些必要的資訊；我們將在教學的末端提供給你。</p>\n<p>在範例 code 中，會使用兩本書的靜態資料。在更複雜的例子中，可以從 web resource（e.g. Amazon 或 本機端的網站）或資料庫（e.g. MySQL 或 MongoDB）來取得資料。</p>\n<ul>\n<li>使用 IDE 或 editor 打開在第一步中所建立的 <code class=\"language-text\">graphql-server-example</code> 資料夾。</li>\n<li>在 project 的根目錄建立名為 <code class=\"language-text\">index.js</code> 的空白檔案。</li>\n<li>「複製」以下的 code block，「貼上」至剛剛建立的 <code class=\"language-text\">index.js</code> 檔案，並「儲存」。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 這是一個（示範的）books 的 collection，我們可以透過 GraphQL server 來 query。</span>\n<span class=\"token comment\">// 在更複雜的例子，我們會從像是 REST API 或資料庫等既有的 data soruce 取得資料。</span>\n<span class=\"token keyword\">const</span> books <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Harry Potter and the Chamber of Secrets'</span><span class=\"token punctuation\">,</span>\n    author<span class=\"token punctuation\">:</span> <span class=\"token string\">'J.K. Rowling'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jurassic Park'</span><span class=\"token punctuation\">,</span>\n    author<span class=\"token punctuation\">:</span> <span class=\"token string\">'Michael Crichton'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Type definitions 定義資料的「形狀」，</span>\n<span class=\"token comment\">// 並指定從 GraphQL server 獲取的方式。</span>\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token string\">`\n  # GraphQL 的註解使用 hash（#）符號來定義\n\n  # 「Book」型別可以使用其他的型別宣告\n  type Book {\n    title: String\n    author: String\n  }\n\n  # 「Query」型別是所有 GraphQL 查詢的 root。\n  # （「Mutation」會在稍後介紹）\n  type Query {\n    books: [Book]\n  }\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Resolvers 定義從 schema 獲取 type 的方式，</span>\n<span class=\"token comment\">// 我們從上面的「books」array 回傳所有的書。</span>\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> books<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 基本上來說，ApolloServer 可以透過傳入 type definitions（typeDefs）</span>\n<span class=\"token comment\">// 及 resolvers 來管理獲取這些資料的型別。</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typeDefs<span class=\"token punctuation\">,</span> resolvers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// `listen` method 啟動 web-server。現有的 apps 可以</span>\n<span class=\"token comment\">// 使用 middleware options，我們將在晚點討論。</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`🚀  Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>以上 code 包含了所有執行基礎 GraphQL server 的需求。在下一步中，我們會啟動 server，讓它可以 response 所有 request！</p>\n<h2 id=\"step-4：啟動-server\"><a href=\"#step-4%EF%BC%9A%E5%95%9F%E5%8B%95-server\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4：啟動 server</h2>\n<p>在此步驟中，我們回到 terminal/console 啟動在剛剛的步驟定義的 server。</p>\n<ul>\n<li>使用 Node.js 執行在剛剛步驟中所建立的 <code class=\"language-text\">index.js</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node index.js</code></pre></div>\n<ul>\n<li>執行後你應該會看到以下的 output：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">🚀 Server ready at http://localhost:4000/</code></pre></div>\n<ul>\n<li>\n<p>在你的瀏覽器打開顯示的位址</p>\n</li>\n<li>\n<p>如果所有東西都正常執行，你應該會看到 GraphQL Playground 資源管理工具，我們將在接下來的步驟使用它。</p>\n</li>\n</ul>\n<p><img src=\"https://www.apollographql.com/docs/apollo-server/images/getting-started/graphql-playground.png\"></p>\n<p>在下個步驟，我們會使用 GraphQL Playground 工具來送出 query 至 GraphQL server。</p>\n<h2 id=\"step-5：執行你的第一個-query\"><a href=\"#step-5%EF%BC%9A%E5%9F%B7%E8%A1%8C%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E5%80%8B-query\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 5：執行你的第一個 query</h2>\n<p>現在，你可以使用 GraphQL Playground 開始向 GraphQL server 送出 query，GraphQL Playground 分為幾個部分：</p>\n<ul>\n<li>request（右側）</li>\n<li>response（左側）</li>\n<li>文件 (點擊最右邊綠色的「SCHEMA」按紐)</li>\n</ul>\n<p>因為我們在試著取得 books，因此可以在畫面左側輸入以下 query。此 query 會取得 books 列表，包含每個 book 的 title 跟 author。</p>\n<div class=\"gatsby-highlight\" data-language=\"gql\"><pre class=\"language-gql\"><code class=\"language-gql\">{\n  books {\n    title\n    author\n  }\n}</code></pre></div>\n<p>當按下中間的播放鈕，會看到右邊的 response 像這樣：</p>\n<p><img src=\"https://www.apollographql.com/docs/apollo-server/images/getting-started/graphql-playground-response.png\"></p>\n<h2 id=\"next-steps\"><a href=\"#next-steps\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next Steps</h2>\n<p>對於任何 GraphQL server，此 application 應該是一個很好的起點，不過下列資源是構建 GraphQL server 的下一步：</p>\n<ul>\n<li><a href=\"https://www.apollographql.com/docs/apollo-server/essentials/server.html#integrations\">Adding Apollo Server to an existing app.</a></li>\n<li><a href=\"https://www.apollographql.com/docs/apollo-server/essentials/schema.html\">Schema design</a></li>\n<li><a href=\"https://www.apollographql.com/docs/apollo-server/deployment/heroku.html\">Deploy with Heroku</a></li>\n</ul>","fields":{"slug":"/2018/07/22/getting-started-apollo-server/"},"frontmatter":{"date":"2018-07-22T14:00:00.000Z","title":"透過 apollo-server 在 10 分鐘內打造你的第一個 GraphQL server"}}},{"node":{"html":"<p>一般在開發 JavaScript 的專案的時候，一定會大量的操作 <code class=\"language-text\">Array</code> / <code class=\"language-text\">Object</code> / <code class=\"language-text\">String</code>…等，但大部分人通常會使用 prototype fucntion，例如使用 <code class=\"language-text\">Array.prototype.push</code>、<code class=\"language-text\">Array.prototype.map</code> 等等，此文將會講解透過 <a href=\"https://lodash.com/\">lodash</a> 所提供的方法，可以如何讓程式碼更佳的簡潔及好維護。</p>\n<!-- more -->\n<blockquote>\n<p>以下程式碼均在 Webpack 且使用 EcmaScript 2015 的環境下執行。</p>\n</blockquote>\n<h4 id=\"什麼是-lodash\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-lodash\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 lodash</h4>\n<p>擷取自官方：</p>\n<blockquote>\n<p>A modern JavaScript utility library delivering modularity, performance &#x26; extras.</p>\n</blockquote>\n<p>簡單來說就是一個擴充 / 增加 JavaScript 的 Library，裡面提供的很多讓你的 JavaScript 更威猛的方法。</p>\n<h5 id=\"在專案中使用-lodash\"><a href=\"#%E5%9C%A8%E5%B0%88%E6%A1%88%E4%B8%AD%E4%BD%BF%E7%94%A8-lodash\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在專案中使用 lodash</h5>\n<p>想要在專案中使用 lodash 相當簡單，只需要透過 <code class=\"language-text\">npm</code> or <code class=\"language-text\">yarn</code> 安裝：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> lodash\n<span class=\"token comment\"># or</span>\n$ yarn add lodash</code></pre></div>\n<p>接著在你的程式碼中 import 即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> map <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/map'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> filter <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/filter'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5 id=\"避免將-lodash-lib-全數引入\"><a href=\"#%E9%81%BF%E5%85%8D%E5%B0%87-lodash-lib-%E5%85%A8%E6%95%B8%E5%BC%95%E5%85%A5\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>避免將 lodash lib 全數引入</h5>\n<p>應該有人發現上方 import 的 code 為什麼是分別 import 所需的方法，而不是使用以下簡潔方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> map<span class=\"token punctuation\">,</span> filter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>因為如果透過以上方式 import，你會將整個 lodash library 都 bundle 起來，若是分別 import，則只會 bundle 你所 import 的方法。</p>\n<p>但是這樣很不美觀，尤其在一個 JS 檔案不可能只使用一兩個 lodash 方法，所以我推薦使用 <a href=\"https://github.com/lodash/babel-plugin-lodash\">babel-plugin-lodash</a>，就可以採用以上方式 import 了。</p>\n<h4 id=\"幾個常用方法\"><a href=\"#%E5%B9%BE%E5%80%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>幾個常用方法</h4>\n<p>以下就介紹幾個我在開發專案時常常使用到的 lodash 方法，lodash 的完整文件由此去。</p>\n<h5 id=\"collection\"><a href=\"#collection\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collection</h5>\n<p>Collection 指的就是 <code class=\"language-text\">Array</code> 及 <code class=\"language-text\">Object</code> 此類可迭代的方法，比較常見的就是 <code class=\"language-text\">map</code> 及 <code class=\"language-text\">filter</code>，這兩個方法在原生 JavaScrtip 中是不支援 <code class=\"language-text\">Object</code> 的，所以通常一般遇到 <code class=\"language-text\">Object</code> 需要迭代時都會使用 <code class=\"language-text\">Object.keys</code> 或是 <code class=\"language-text\">for in</code> 這種很醜的方式去做，但是在 lodash 中則可以將此類方法用在 <code class=\"language-text\">Object</code>，相當推薦！</p>\n<blockquote>\n<p>這邊要注意的是，不論傳入的是 <code class=\"language-text\">Array</code> 還是 <code class=\"language-text\">Object</code>，一律會回傳 <code class=\"language-text\">Array</code></p>\n</blockquote>\n<p><code class=\"language-text\">map()</code></p>\n<p>迭代每個元素，並回傳新的 Array。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> map <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=></span> n <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [16, 64]</span>\n\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [16, 64] (不保證迭代順序)</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'barney'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'fred'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// `_.property` 迭代縮寫</span>\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => ['barney', 'fred'] (取得指定屬性的 Array)</span>\n\n<span class=\"token comment\">// 如果 API 收到奇怪的 Object</span>\n<span class=\"token keyword\">const</span> weireUsers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'barney'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'fred'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span>weireUsers<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [{ id: 1, user: 'barney' }, { id: 2, user: 'fred' }];</span></code></pre></div>\n<p><code class=\"language-text\">each()</code> / <code class=\"language-text\">forEach()</code></p>\n<p>迭代每個元素，但不回傳任何東西。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> forEach <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 先印出 `1` 接著是 `2`.</span>\n\n<span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 先印出 'a' 接著是 'b' (不保證迭代順序)。</span></code></pre></div>\n<p><code class=\"language-text\">filter()</code></p>\n<p>迭代每個元素，並回傳符合條件的 Array，另外還有與此相反的方法 <code class=\"language-text\">reject()</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> filter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'barney'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'fred'</span><span class=\"token punctuation\">,</span>   <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> o <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>o<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => ['fred'] 的 objects</span>\n\n<span class=\"token comment\">// `_.matches` 迭代縮寫</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => ['barney'] 的 objects</span>\n\n<span class=\"token comment\">// `_.matchesProperty` 迭代縮寫</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => ['fred'] 的 objects</span>\n\n<span class=\"token comment\">// `_.property` 迭代縮寫</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => ['barney'] 的 objects</span></code></pre></div>\n<p><code class=\"language-text\">find()</code></p>\n<p>尋找指定的元素。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> find <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'barney'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'fred'</span><span class=\"token punctuation\">,</span>    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'pebbles'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">find</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> o <span class=\"token operator\">=></span> o<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 'barney' 的 object</span>\n\n<span class=\"token comment\">// `_.matches` 迭代縮寫</span>\n<span class=\"token function\">find</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 'pebbles' 的 object</span>\n\n<span class=\"token comment\">// `_.matchesProperty` 迭代縮寫</span>\n<span class=\"token function\">find</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 'fred' 的 object</span>\n\n<span class=\"token comment\">// `_.property` 迭代縮寫</span>\n<span class=\"token function\">find</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 'barney' 的 object</span></code></pre></div>\n<p><code class=\"language-text\">some()</code></p>\n<p>判斷是否有符合條件的元素，與此相反的有 <code class=\"language-text\">every()</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> some <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yes'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'barney'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'fred'</span><span class=\"token punctuation\">,</span>   <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// `_.matches` 迭代縮寫</span>\n<span class=\"token function\">some</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'barney'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => false</span>\n\n<span class=\"token comment\">// `_.matchesProperty` 迭代縮寫</span>\n<span class=\"token function\">some</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true</span>\n\n<span class=\"token comment\">// `_.property` 迭代縮寫</span>\n<span class=\"token function\">some</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true</span></code></pre></div>\n<h5 id=\"array\"><a href=\"#array\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array</h5>\n<p>除非是使用 FP，不然 Array 的方法其實用到的比較少，因為很大一部分都只是將 <code class=\"language-text\">array.f(...arguments)</code> 方法轉成 <code class=\"language-text\">f(array, ...arguments)</code> 的方法而已。</p>\n<p><code class=\"language-text\">findIndex()</code></p>\n<p>尋找 Array 中指定條件的 index。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> findIndex <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'barney'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'fred'</span><span class=\"token punctuation\">,</span>    <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'pebbles'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> o <span class=\"token operator\">=></span> o<span class=\"token punctuation\">.</span>user <span class=\"token operator\">==</span> <span class=\"token string\">'barney'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 0</span>\n\n<span class=\"token comment\">// `_.matches` 迭代縮寫</span>\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'fred'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 1</span>\n\n<span class=\"token comment\">// `_.matchesProperty` 迭代縮寫</span>\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 0</span>\n\n<span class=\"token comment\">// `_.property` 迭代縮寫</span>\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 2</span></code></pre></div>\n<h5 id=\"object\"><a href=\"#object\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object</h5>\n<p>比較特別的就是以下兩種，至於其他方法也是在 FP 時才會用到，一般情形下不常用。</p>\n<p><code class=\"language-text\">mapKeys()</code></p>\n<p>迭代 Object 並回傳修改 Key 的 Object。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mapKeys <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">mapKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> key <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => { 'a1': 1, 'b2': 2 }</span></code></pre></div>\n<p><code class=\"language-text\">mapValue()</code></p>\n<p>迭代 Object 並回傳修改 Value 的 Object。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'fred'</span><span class=\"token punctuation\">:</span>    <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'fred'</span><span class=\"token punctuation\">,</span>    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'pebbles'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'pebbles'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">mapValues</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> o <span class=\"token operator\">=></span> o<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => { 'fred': 40, 'pebbles': 1 } (不保證迭代順序)</span>\n\n<span class=\"token comment\">// `_.property` 迭代縮寫</span>\n<span class=\"token function\">mapValues</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => { 'fred': 40, 'pebbles': 1 } (不保證迭代順序)</span></code></pre></div>\n<h5 id=\"string\"><a href=\"#string\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String</h5>\n<p>lodash 提供的方法在 <code class=\"language-text\">String.prototype</code> 其實都有了，不過個人為了美觀也會一併使用 lodash 的方法，有興趣的人可以直接去看官方文件，這邊就不多介紹了。</p>\n<h5 id=\"others\"><a href=\"#others\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Others</h5>\n<p>除此之外 lodash 還有提供很多不同的方法，這邊介紹幾個我常用到的</p>\n<p><code class=\"language-text\">isEmpty()</code></p>\n<p>用於判斷是否是空的 object, collection, map, 或 set，相當於 <code class=\"language-text\">value.length === 0</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isEmpty <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true</span>\n\n<span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true</span>\n\n<span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true</span>\n\n<span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => false</span>\n\n<span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => false</span></code></pre></div>\n<p><code class=\"language-text\">isEqual()</code></p>\n<p>判斷兩個值是否完全相同，常用於兩個不同的 Object 比較。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isEqual <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> other <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true</span>\n\nobject <span class=\"token operator\">===</span> other<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => false</span></code></pre></div>\n<p><code class=\"language-text\">range()</code></p>\n<p>產生指定形式的 Array</p>\n<ul>\n<li><code class=\"language-text\">[start=0] (number)</code>: 起始值</li>\n<li><code class=\"language-text\">end (number)</code>: 結束值</li>\n<li><code class=\"language-text\">[step=1] (number)</code>: 遞增間隔</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> range <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [0, 1, 2, 3]</span>\n\n<span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [0, -1, -2, -3]</span>\n\n<span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [1, 2, 3, 4]</span>\n\n<span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [0, 5, 10, 15]</span>\n\n<span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [0, -1, -2, -3]</span>\n\n<span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [1, 1, 1]</span>\n\n<span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => []</span></code></pre></div>\n<h4 id=\"結語\"><a href=\"#%E7%B5%90%E8%AA%9E\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結語</h4>\n<p>如此之外，lodash 還有提供 <a href=\"https://github.com/lodash/lodash/wiki/FP-Guide\">lodash/fp</a>，學會一點簡單的 FP( Fucntional Programming )可以讓你的程式碼更簡潔易維護，有興趣的人可以去官方文件看看。</p>\n<p>如果不知道什麼是 FP，可以參考我翻譯到一半的 <a href=\"https://jigsawye.gitbooks.io/mostly-adequate-guide/content/\">JavaScript Functional Programming 指南</a>。</p>","fields":{"slug":"/2017/09/04/make-good-use-of-lodash/"},"frontmatter":{"date":"2017-09-04T12:00:00.000Z","title":"充分利用 lodash 讓你的程式碼更易讀及維護"}}},{"node":{"html":"<p>去年底退伍之後進入新公司開始工作，近一年來都在 Vue / Vuex / Vue-Router 之間打滾，也寫出一些心得了，就在睽違一年多之後可以來寫新的東西了 XD。</p>\n<p>大部分人透過 Vue 開發 SPA（Single Page Application）時通常都會搭配 Vuex 一起使用，如果不知道 Vuex 的作用的話那可以先去參考一下<a href=\"https://vuex.vuejs.org/en/intro.html\">官方介紹</a>。</p>\n<!-- more -->\n<blockquote>\n<p>以下範例均來自於<a href=\"https://vuex.vuejs.org/en/modules.html\">官方文件</a>並依據本文加以修改、調整與翻譯</p>\n</blockquote>\n<h4 id=\"state\"><a href=\"#state\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State</h4>\n<h5 id=\"基礎介紹\"><a href=\"#%E5%9F%BA%E7%A4%8E%E4%BB%8B%E7%B4%B9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基礎介紹</h5>\n<p>因為官方的文件中都有講解跟範例了，所以 mutation 跟 action 及 getters 的作用就不多提了，以下就大概提一下 state 的部分。</p>\n<p>在 Vuex 中都會有個 State，裡面包含了儲存在 Vuex 中的所有資料，大致長得像這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"實際情況\"><a href=\"#%E5%AF%A6%E9%9A%9B%E6%83%85%E6%B3%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實際情況</h5>\n<p>不過在一般專案開發不可能只有一兩個變數而已，所以會切分成好幾個 <code class=\"language-text\">module</code>，大致如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> moduleA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  getters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> moduleB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> moduleA<span class=\"token punctuation\">,</span>\n    b<span class=\"token punctuation\">:</span> moduleB\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如果你想存取 state 或是 dispatch actions 時會如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>a <span class=\"token comment\">// -> `moduleA`'s state</span>\nstore<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>b <span class=\"token comment\">// -> `moduleB`'s state</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ActionOfModuleA'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> `moduleA`'s action</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ActionOfModuleB'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> `moduleB`'s action</span></code></pre></div>\n<p>因爲將多個 module 併入一個 Vuex Store 時，actions 及 mutations 都是在 root space 中，所以一般會為了避免 actions / mutations 的命名衝突，會自己加上 namespace 或是另外去建立這些名稱的 constants：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// mutation-types.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SOME_MUTATION_A</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A/SOME_MUTATION'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SOME_MUTATION_B</span> <span class=\"token operator\">=</span> <span class=\"token string\">'B/SOME_MUTATION'</span>\n<span class=\"token comment\">// store.js</span>\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SOME_MUTATION_A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SOME_MUTATION_B</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./mutation-types'</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    moduleA<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 我們可以使用 ES2015 的 computed property name 功能定義一個 function name</span>\n        <span class=\"token punctuation\">[</span><span class=\"token constant\">SOME_MUTATION_A</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// mutate state</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    moduleB<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token constant\">SOME_MUTATION_B</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// mutate state</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"vuex-namespacing\"><a href=\"#vuex-namespacing\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vuex namespacing</h4>\n<h5 id=\"namespaced-true\"><a href=\"#namespaced-true\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>namespaced: true</h5>\n<p>Vuex 在 <code class=\"language-text\">2.1.0</code> 版時在 <code class=\"language-text\">module</code> 中加入了 <code class=\"language-text\">namespaced</code> 的選項，透過啟用這個選項，Vuex 會自動幫你在 module 的 actions / mutations / getters 加上 namespace 的 prefix：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> moduleA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  namespced<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  getters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> moduleB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  namespced<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> moduleA<span class=\"token punctuation\">,</span>\n    b<span class=\"token punctuation\">:</span> moduleB\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nstore<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>a <span class=\"token comment\">// -> `moduleA`'s state</span>\nstore<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>b <span class=\"token comment\">// -> `moduleB`'s state</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a/ActionOfModuleA'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> `moduleA`'s action</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b/ActionOfModuleB'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> `moduleB`'s action</span></code></pre></div>\n<p>除此之外，namespaced 也支援巢狀的 module，e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        moduleC\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token punctuation\">:</span> moduleB\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"how-the-namespecing-do\"><a href=\"#how-the-namespecing-do\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How the namespecing do?</h5>\n<p>這邊稍微講一下 Vuex 的 namespacing 做了哪些事情：</p>\n<ul>\n<li>所有的 actions、mutations 都會加上 prefix：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    account<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      namespaced<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// module assets</span>\n      state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// module 的 state 已經是巢狀的，不會受到 namespace 影響</span>\n      getters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">isAdmin</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// -> getters['account/isAdmin']</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">login</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// -> dispatch('account/login')</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">login</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// -> commit('account/login')</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// nested modules</span>\n      modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 從父 module 繼承 namespace</span>\n        myPage<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          getters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">profile</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// -> getters['account/profile']</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">// 進一步的巢狀 namespace</span>\n        posts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          namespaced<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n          state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          getters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">popular</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// -> getters['account/posts/popular']</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>在 module 內的所有 actions、mudations、state 會自動加上 namespace</p>\n</li>\n<li>\n<p>如果你要在 locale module 使用其他 module 的 actions / mutations，請在 <code class=\"language-text\">dispatch</code> / <code class=\"language-text\">commit</code> 的第三個參數帶入 <code class=\"language-text\">{ root: true }</code></p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    namespaced<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n    getters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// `getters` 是 module 內的其他 getters，如果要存取 rootGetters 可以使用第四個參數</span>\n      <span class=\"token function\">someGetter</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> getters<span class=\"token punctuation\">,</span> rootState<span class=\"token punctuation\">,</span> rootGetters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        getters<span class=\"token punctuation\">.</span>someOtherGetter <span class=\"token comment\">// -> 'foo/someOtherGetter'</span>\n        rootGetters<span class=\"token punctuation\">.</span>someOtherGetter <span class=\"token comment\">// -> 'someOtherGetter'</span>\n        rootGetters<span class=\"token punctuation\">[</span><span class=\"token string\">'bar/someOtherGetter'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// -> 'bar/someOtherGetter'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      someOtherGetter<span class=\"token punctuation\">:</span> state <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// dispatch 及 commit 是會自動加上 module 內的 namespace</span>\n      <span class=\"token comment\">// 如果要存取 root dispatch 或 commit 可以加入 `root` 選項</span>\n      <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dispatch<span class=\"token punctuation\">,</span> commit<span class=\"token punctuation\">,</span> getters<span class=\"token punctuation\">,</span> rootGetters <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        getters<span class=\"token punctuation\">.</span>someGetter <span class=\"token comment\">// -> 'foo/someGetter'</span>\n        rootGetters<span class=\"token punctuation\">.</span>someGetter <span class=\"token comment\">// -> 'someGetter'</span>\n\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someOtherAction'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> 'foo/someOtherAction'</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someOtherAction'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> root<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> 'someOtherAction'</span>\n\n        <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someMutation'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> 'foo/someMutation'</span>\n        <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someMutation'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> root<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> 'someMutation'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">someOtherAction</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"helpers\"><a href=\"#helpers\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Helpers</h4>\n<p>以下就講解一下 Vuex 的 helpers 在遇到 namespaced 的用法</p>\n<h5 id=\"mapstate\"><a href=\"#mapstate\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mapState</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">computed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>some<span class=\"token punctuation\">.</span>nested<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> <span class=\"token comment\">// this.a</span>\n    b<span class=\"token punctuation\">:</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>some<span class=\"token punctuation\">.</span>nested<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span>b  <span class=\"token comment\">// this.b</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// to</span>\n\ncomputed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some/nested/module'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> <span class=\"token comment\">// this.a</span>\n    b<span class=\"token punctuation\">:</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>b  <span class=\"token comment\">// this.b</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// or</span>\n  <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some/nested/module'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// this.a</span>\n    <span class=\"token string\">'b'</span>   <span class=\"token comment\">// this.b</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// alias</span>\n  <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some/nested/module'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    dataA<span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// this.dataA</span>\n    dataB<span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span>  <span class=\"token comment\">// this.dataB</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h5 id=\"mapactions\"><a href=\"#mapactions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mapActions</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'some/nested/module/foo'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// this.foo()</span>\n    <span class=\"token string\">'some/nested/module/bar'</span>  <span class=\"token comment\">// this.bar()</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// to</span>\n\nmethods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some/nested/module'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// this.foo()</span>\n    <span class=\"token string\">'bar'</span>  <span class=\"token comment\">// this.bar()</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// alias</span>\n  <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some/nested/module'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    fooA<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// this.fooA();</span>\n    barA<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span>  <span class=\"token comment\">// this.barA()</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"mapgetters\"><a href=\"#mapgetters\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mapGetters</h5>\n<p>與 <code class=\"language-text\">mapActions</code> 用法相同</p>\n<h5 id=\"createnamespacedhelpers\"><a href=\"#createnamespacedhelpers\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createNamespacedHelpers</h5>\n<p><code class=\"language-text\">2.4.0</code> 加入的新 helper</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createNamespacedHelpers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> mapState<span class=\"token punctuation\">,</span> mapActions <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">createNamespacedHelpers</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some/nested/module'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  computed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// look up in `some/nested/module`</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      a<span class=\"token punctuation\">:</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> <span class=\"token comment\">// this.a</span>\n      b<span class=\"token punctuation\">:</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>b  <span class=\"token comment\">// this.b</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// or</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// this.a</span>\n      <span class=\"token string\">'b'</span>  <span class=\"token comment\">// this.b</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// look up in `some/nested/module`</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// this.foo()</span>\n      <span class=\"token string\">'bar'</span>  <span class=\"token comment\">// this.bar()</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/2017/08/30/vuex-module-namespacing/"},"frontmatter":{"date":"2017-08-30T12:00:00.000Z","title":"透過 namespacing 讓 Vuex 更結構化"}}},{"node":{"html":"<p>在 Mac 上用 <a href=\"https://github.com/robbyrussell/oh-my-zsh\">zsh</a> 已經有一陣子了，最讓我詬病的就是 zsh 的 auto suggestion 及 auto completion 速度相當慢，而且有一些很奇怪的問題（bugs?）。最近 <a href=\"https://fishshell.com/\">fish</a> 這個 shell 好像很紅，索性就把 zsh 換成 fish 了。</p>\n<p>裝完後不只速度 ++，連 plugin / theme 的套件管理都有（<a href=\"https://github.com/fisherman/fisherman\">fisherman</a>），使用起來相當快速方便，要說缺點呢，就是與 bash 不相容，所以很常在寫 bash 的捧油只能看看囉。</p>\n<!-- more -->\n<blockquote>\n<p>Updated on 2016/06/21\n寫完這篇隔天就收到 oh-my-fish 已經不 maintain 了，所以換成 fisherman。</p>\n</blockquote>\n<h3 id=\"fish\"><a href=\"#fish\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fish</h3>\n<h5 id=\"installation\"><a href=\"#installation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation</h5>\n<p>只要用 homebrew 安裝即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> fish</code></pre></div>\n<h5 id=\"usage\"><a href=\"#usage\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h5>\n<p>不論你預設是 bash 還是 zsh，執行 <code class=\"language-text\">fish</code> 就能切到 fish shell 了。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ fish</code></pre></div>\n<h5 id=\"set-fish-as-default-shell\"><a href=\"#set-fish-as-default-shell\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set fish as default shell</h5>\n<p>當然不可能每次開 terminal 就切換一次，我們可以把 fish 改成 terminal 的 default shell：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">echo</span> <span class=\"token string\">\"/usr/local/bin/fish\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> -a /etc/shells\n$ chsh -s /usr/local/bin/fish</code></pre></div>\n<h3 id=\"fisherman\"><a href=\"#fisherman\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fisherman</h3>\n<p><code class=\"language-text\">fisherman</code> 跟 <code class=\"language-text\">oh-my-zsh</code> 用起來是截然不同的感受，oh-my-zsh 是把 plugins 全部都裝好了，只需要啟動，fishermane 用起來則像是 <code class=\"language-text\">npm</code> 或 <code class=\"language-text\">composer</code> 的套件管理器一樣。</p>\n<h5 id=\"installation-1\"><a href=\"#installation-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation</h5>\n<p>curl 拉下來就行了：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -Lo ~/.config/fish/functions/fisher.fish --create-dirs git.io/fisher</code></pre></div>\n<h5 id=\"usage-1\"><a href=\"#usage-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h5>\n<p>直接看官方 README 吧：<a href=\"https://github.com/fisherman/fisherman\">https://github.com/fisherman/fisherman</a></p>\n<h3 id=\"額外補充\"><a href=\"#%E9%A1%8D%E5%A4%96%E8%A3%9C%E5%85%85\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>額外補充</h3>\n<p>如果你有在使用 nvm 的話，因為 nvm 是透過 <code class=\"language-text\">source ~/.nvm/nvm.sh</code> 執行，但因為 fish 不支援 bash，所以這支檔案裡的 shell 會直接爆給你看。</p>\n<p>要解決這個問題的話直接透過 fisherman 安裝 nvm 的 <a href=\"https://github.com/fisherman/nvm\">plugin</a> 即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ fisher nvm</code></pre></div>\n<p>這樣還會發生一個問題，就是 nvm 不會自動使用 default 的 node 版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node -v\nfish: Unknown <span class=\"token function\">command</span> <span class=\"token string\">'node'</span></code></pre></div>\n<p>用編輯器打開 <code class=\"language-text\">~/.config/fish/config.fish</code> 新增下面這行即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bass <span class=\"token function\">source</span> ~/.nvm/nvm.sh</code></pre></div>\n<p>bass 是讓 fish 可以執行 bash 的一個橋接工具，透過 bass 就能執行 bash 了。</p>","fields":{"slug":"/2016/06/21/install-fish-shell-on-os-x/"},"frontmatter":{"date":"2016-06-21T12:00:00.000Z","title":"在 OSX 使用 Fish shell 取代 bash/zsh"}}},{"node":{"html":"<p>最近在做一個自己的 <a href=\"https://github.com/jigsawye/koa2-boilerplate\">API boilerplate</a>，選用了 <a href=\"https://github.com/koajs/koa\">koa</a> 這個 library。而其中除了 stable 的 <code class=\"language-text\">1.x</code> 外，它還 release <code class=\"language-text\">2.x</code>！有什麼不同呢？<code class=\"language-text\">1.x</code> 是用 generator 來實作，而到了 <code class=\"language-text\">2.x</code> 竟然是用 Async/Await！身為一個熱血碼農，怎能錯過這個進場 Async/Await 的大好機會 XD。</p>\n<!-- more -->\n<h4 id=\"說說-promise\"><a href=\"#%E8%AA%AA%E8%AA%AA-promise\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>說說 Promise</h4>\n<p>在很久以前，那是個 JavaScript callback hell 的年代，為了處理這種處境，有人提出了 Promise 的寫法。而 Promise 也是近年開發 JavaScript 程式不可或缺的一門基礎，在 ES2015 也將 Promise 納為其中的一項標準。</p>\n<h5 id=\"非同步-function\"><a href=\"#%E9%9D%9E%E5%90%8C%E6%AD%A5-function\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>非同步 function</h5>\n<p>關於非同步的文章網路上已經很多了，就不在此贅述。在這裡我直接先以 Promise 實作一個簡易的非同步程式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Post 1'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">:</span> <span class=\"token string\">'fake content'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Post 2'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">:</span> <span class=\"token string\">'fake content'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPosts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我習慣寫 ES2015 的 arrow function，如果看不習慣的話，在一般 function 會像下面這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這支程式會回傳一個 Promise，而模擬在 1 秒後 resolve 一個模擬的 <code class=\"language-text\">posts</code>。</p>\n<h5 id=\"呼叫一個非同步-function\"><a href=\"#%E5%91%BC%E5%8F%AB%E4%B8%80%E5%80%8B%E9%9D%9E%E5%90%8C%E6%AD%A5-function\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>呼叫一個非同步 function</h5>\n<p>在 Promise 的做法中，我們就會這樣來實作取得 posts 的程式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">printPostsToConsole</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>posts <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printPostsToConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>除此之外還會加上 error handler：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">printPostsToConsole</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>posts <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printPostsToConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"如果是-asyncawait？\"><a href=\"#%E5%A6%82%E6%9E%9C%E6%98%AF-asyncawait%EF%BC%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如果是 Async/Await？</h4>\n<p>Async/Await 被規範在 ES2016 的標準中，很多的討論都指向 Async/Await 會是非同步的終極解決方案。</p>\n<h5 id=\"用-asyncawait-處理非同步-function\"><a href=\"#%E7%94%A8-asyncawait-%E8%99%95%E7%90%86%E9%9D%9E%E5%90%8C%E6%AD%A5-function\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用 Async/Await 處理非同步 function</h5>\n<p>換成 Async/Await 的話，就不必寫下 <code class=\"language-text\">.then()</code> 了！就像同步的程式一般，不必理會它是否為非同步。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> printPostsToConsole <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printPostsToConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>也可以寫成這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">printPostsToConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printPostsToConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>宣告在 <code class=\"language-text\">printPostsToConsole</code> 的 <code class=\"language-text\">async</code> 表示該 function 是個非同步的。而在 function 內 <code class=\"language-text\">getPosts</code> 之前的 <code class=\"language-text\">await</code> 表示要等待這個非同步的結果回傳後才會繼續執行，也就是說這個 function 內的程式都變為同步了！</p>\n<p>當然在也要加上 error handler。在 Async/Await 中請使用 <code class=\"language-text\">try/catch</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> printPostsToConsole <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"現在就開始用-asyncawait！\"><a href=\"#%E7%8F%BE%E5%9C%A8%E5%B0%B1%E9%96%8B%E5%A7%8B%E7%94%A8-asyncawait%EF%BC%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>現在就開始用 Async/Await！</h4>\n<h5 id=\"在前端\"><a href=\"#%E5%9C%A8%E5%89%8D%E7%AB%AF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在前端</h5>\n<p>如何在現在的環境實作 Async/Await 呢？其實如果有在寫 Front-end（尤其是 React），基本上應該已經使用了 <a href=\"babeljs.io\">babel</a>。如果要使用 Async/Await，presets 除了原本的 <code class=\"language-text\">es2015</code> 外，只要加上 <code class=\"language-text\">stage-3</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stage-3\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>或是將 <code class=\"language-text\">transform-async-to-generator</code> 加入 plugins 就行了：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"transform-async-to-generator\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"在後端\"><a href=\"#%E5%9C%A8%E5%BE%8C%E7%AB%AF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在後端</h5>\n<p>在 backend 的情況則比較不同，雖然一樣要透過 babel，不過請裝 <a href=\"babel-preset-es2015-node4\">es2015-node4</a> 或是 <a href=\"https://github.com/alekseykulikov/babel-preset-es2015-node5\">es2015-node5</a>（根據你的 node 版本做選擇），其餘則跟前端一樣。</p>\n<blockquote>\n<p>Node 7.0.0 起已經支援 Async/Await，建議直接更新你的 Node 版本！</p>\n</blockquote>\n<p>接著如果要讓你的程式能夠執行 Async/Await，請額外建立一個檔案，並 require <code class=\"language-text\">babel-register</code> 及你程式的 entry：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babel-register'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../app.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著只要用 node 執行 <code class=\"language-text\">index.js</code> 就行了。</p>\n<p>關於詳細的設定可以參考我的 <a href=\"https://github.com/jigsawye/koa2-boilerplate\">koa2-boilerplate</a></p>\n<h4 id=\"後記\"><a href=\"#%E5%BE%8C%E8%A8%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>後記</h4>\n<p>緊接在 ES2015 之後的 ES2016 也增加了不少的新 feature，除了 Async/Await 也有 <a href=\"https://github.com/sebmarkbage/ecmascript-rest-spread\">object-rest-spread</a>、<a href=\"https://github.com/tc39/ecma262/blob/master/workingdocs/callconstructor.md\">class-constructor-call</a>、<a href=\"https://github.com/jeffmo/es-class-fields-and-static-properties\">class-properties</a>等等。</p>\n<p>在 ES2015 泛用的現在，其實有機會的話可以慢慢接觸 ES2016 的功能了，對開發可以增添一股助力！</p>","fields":{"slug":"/2016/04/18/understanding-javascript-async-await/"},"frontmatter":{"date":"2016-04-18T19:33:55.000Z","title":"告別 JavaScript 的 Promise！迎接 Async/Await 的到來"}}},{"node":{"html":"<blockquote>\n<p>更新於 2017/1/10：Laravel 官方已推出 <a href=\"https://laravel.com/docs/5.3/valet\">Laravel Valet</a>，建議採用 Valet 方式進行安裝。</p>\n</blockquote>\n<blockquote>\n<p>建議你熟悉 Terminal 的操作再參考本篇，否則容易把系統環境搞亂。</p>\n</blockquote>\n<p>在開發 Laravel Application 時，新手可能使用 *AMP 的系統環境整合包，而大多數人會選擇官方所提供的 <a href=\"https://laravel.tw/docs/5.2/homestead\">Homestead</a>。但 Homestead 其實就是一包很大包的虛擬機再配上 Vargrant，曾幾何時我也是使用 Homestead，但是因為我的小 Macbook Air 實在是受不了虛擬機容量一大包，又吃一堆記憶體。</p>\n<p>雖然標題是寫 Laravel，但是要應用在其他的 PHP Application 也是可行的。本篇就以 Homebrew 為主軸，打造 Laravel 的開發環境。</p>\n<!-- more -->\n<h3 id=\"啥？homebrew\"><a href=\"#%E5%95%A5%EF%BC%9Fhomebrew\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>啥？Homebrew</h3>\n<p>如同 ubuntu 有 <code class=\"language-text\">apt-get</code>、CentOS 有 <code class=\"language-text\">yum</code> 一樣，<a href=\"http://brew.sh/index_zh-tw.html\">Homebrew</a> 就是 OSX 的套件管理器。不同的是前者都是系統內建的，而 Homebrew 則是因為 OSX 本身沒有這種東西，所以就有大神為 OSX 打造了套件管理器。</p>\n<h3 id=\"需要什麼？\"><a href=\"#%E9%9C%80%E8%A6%81%E4%BB%80%E9%BA%BC%EF%BC%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>需要什麼？</h3>\n<p>在開始之前，先說說開發 Laravel 需要哪些需求？</p>\n<h6 id=\"php-cli\"><a href=\"#php-cli\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PHP-CLI</h6>\n<p>Laravel 是目前在 PHP 中最熱門的 Framework，其實除了透過 *AMP 指向 <code class=\"language-text\">public</code> 資料夾及使用 Homestead 外，Laravel 也提供了 command line 的方式啟動 development server。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ php artisan serve\nLaravel development server started on http://localhost:8000/</code></pre></div>\n<p>只要在專案目錄中執行 <code class=\"language-text\">php artisan serve</code>，就會執行 development server。也就是說我們至少需要 php-cli 來執行 development server。</p>\n<blockquote>\n<p>PHP-CLI 為 PHP Command Line Interface，也就是 Command Line 的 PHP 執行環境。</p>\n</blockquote>\n<h6 id=\"mariadb\"><a href=\"#mariadb\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MariaDB</h6>\n<p>沒錯，開發一個 Web Application 一定需要資料庫，而我平常是使用 MariaDB，所以我們也必須安裝 MariaDB。</p>\n<h6 id=\"redis\"><a href=\"#redis\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redis</h6>\n<p>而我平常在開發的時候，會把 Cache、Session、及 Queue 的 Driver 都設定為 Redis，所以我們會安裝 Redis。</p>\n<h6 id=\"總結\"><a href=\"#%E7%B8%BD%E7%B5%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>總結</h6>\n<p>所以我們必須透過 Homebrew 安裝這些東西：</p>\n<ul>\n<li>php</li>\n<li>mariadb</li>\n<li>redis</li>\n</ul>\n<h3 id=\"getting-started\"><a href=\"#getting-started\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting started</h3>\n<h6 id=\"homebrew\"><a href=\"#homebrew\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Homebrew</h6>\n<h5 id=\"安裝\"><a href=\"#%E5%AE%89%E8%A3%9D\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安裝</h5>\n<p>開始之前，當然必須先安裝 <a href=\"http://brew.sh/index_zh-tw.html\">Homebrew</a>，官方網站已有提供指令進行安裝，打開 terminal 並輸入即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/usr/bin/ruby -e <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class=\"token variable\">)</span></span>\"</span></code></pre></div>\n<blockquote>\n<p>此指令會透過 curl 下載官方安裝檔，並透過 ruby 執行。他會在你的電腦安裝 homebrew。</p>\n</blockquote>\n<h5 id=\"使用\"><a href=\"#%E4%BD%BF%E7%94%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用</h5>\n<p>Homebrew 的使用方式很簡單，以下介紹幾個常用指令：</p>\n<ul>\n<li><code class=\"language-text\">brew update</code>：更新 Homebrew。</li>\n<li><code class=\"language-text\">brew search wget</code>：透過 <code class=\"language-text\">brew search</code> 可以搜尋套件，範例為搜尋名字有 wget 的套件。</li>\n<li><code class=\"language-text\">brew install wget</code>：你可以使用 <code class=\"language-text\">brew intsall</code> 來安裝套件，範例會安裝 wget。</li>\n</ul>\n<p>更多指令可以輸入 <code class=\"language-text\">brew help</code>，或參考<a href=\"https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/FAQ.md\">官方的 FAQ</a>。</p>\n<h6 id=\"php\"><a href=\"#php\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PHP</h6>\n<h5 id=\"安裝-1\"><a href=\"#%E5%AE%89%E8%A3%9D-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安裝</h5>\n<p>當然，我們首先必須安裝 PHP，我們先執行以下指令尋找 php：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew search php</code></pre></div>\n<p>你應該會看到非常多的 php，像是 <code class=\"language-text\">homebrew/php/php53</code>、<code class=\"language-text\">homebrew/php/php54</code>⋯⋯一直到最新的 <code class=\"language-text\">homebrew/php/php70</code>。而 php 7.0 有相容舊版本，所以我是使用 php 7.0 開發，所以我們來搜尋一下 php 7.0：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew search php70</code></pre></div>\n<p>你會看到 PHP 7.0，及 PHP 7.0 的 extenstions。我們直接安裝 php70 即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> php70</code></pre></div>\n<h5 id=\"使用-1\"><a href=\"#%E4%BD%BF%E7%94%A8-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用</h5>\n<p>安裝完後，執行以下指令看看是否有安裝完成：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ php -v\nPHP 7.0.2 <span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>built: Jan  7 2016 10:40:26<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> NTS <span class=\"token punctuation\">)</span>\nCopyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 1997-2015 The PHP Group\nZend Engine v3.0.0, Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 1998-2015 Zend Technologies</code></pre></div>\n<p>你可以進入一個 Laravel 專案，並執行 development server 看看：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ laravel new awesome_homebrew\n$ <span class=\"token function\">cd</span> awesome_homebrew\n$ php artisan serve\nLaravel development server started on http://localhost:8000/</code></pre></div>\n<p>你也可以指定 Port：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ php artisan serve --port<span class=\"token operator\">=</span>8080\nLaravel development server started on http://localhost:8080/</code></pre></div>\n<p>如果是一般的 PHP 專案，可以用以下方式開啟 development server：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ php -S localhost:8000 -t public\nPHP 7.0.2 Development Server started at Mon Feb  1 17:02:58 2016\nListening on http://localhost:8000\nDocument root is /Users/jigsawye/Projects/laravel/demo/public\nPress Ctrl-C to quit.</code></pre></div>\n<p>其中 <code class=\"language-text\">localhost:8000</code> 的部分是指你要開在哪個 Host，後面的 public 則是選擇你 <code class=\"language-text\">indxe.php</code> 的目錄，也就是 Application 進入點。</p>\n<h6 id=\"mariadb-1\"><a href=\"#mariadb-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MariaDB</h6>\n<h5 id=\"安裝-2\"><a href=\"#%E5%AE%89%E8%A3%9D-2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安裝</h5>\n<p>安裝方式一樣，先搜尋再安裝：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew search mariadb\n$ brew <span class=\"token function\">install</span> mariadb</code></pre></div>\n<h5 id=\"使用-2\"><a href=\"#%E4%BD%BF%E7%94%A8-2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用</h5>\n<p>安裝完成後，Homebrew 會提示你可以使用以下指令開啟 MySQL：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mysql.server start\nStarting MySQL\n<span class=\"token keyword\">.</span> SUCCESS<span class=\"token operator\">!</span></code></pre></div>\n<p>然後你可以連接至你的 MySQL：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mysql -uroot</code></pre></div>\n<h6 id=\"redis-1\"><a href=\"#redis-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redis</h6>\n<h5 id=\"安裝-3\"><a href=\"#%E5%AE%89%E8%A3%9D-3\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安裝</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew search redis\n$ brew <span class=\"token function\">install</span> redis</code></pre></div>\n<h5 id=\"使用-3\"><a href=\"#%E4%BD%BF%E7%94%A8-3\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用</h5>\n<p>同樣的，Homebrew 提示使用以下指令開啟 Redis：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ redis-server /usr/local/etc/redis.conf\n5725:M 01 Feb 15:53:36.291 * Increased maximum number of <span class=\"token function\">open</span> files to 10032 <span class=\"token punctuation\">(</span>it was originally <span class=\"token keyword\">set</span> to 2560<span class=\"token punctuation\">)</span>.\n                _._\n           _.-`<span class=\"token variable\"><span class=\"token variable\">`</span>__ <span class=\"token string\">''</span>-._\n      _.-<span class=\"token variable\">`</span></span><span class=\"token variable\"><span class=\"token variable\">`</span>    <span class=\"token variable\">`</span></span><span class=\"token keyword\">.</span>  <span class=\"token variable\"><span class=\"token variable\">`</span>_.  <span class=\"token string\">''</span>-._           Redis 3.0.7 <span class=\"token punctuation\">(</span>00000000/0<span class=\"token punctuation\">)</span> 64 bit\n  .-<span class=\"token variable\">`</span></span><span class=\"token variable\"><span class=\"token variable\">`</span> .-<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token keyword\">.</span>  <span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>\\/    _.,_ <span class=\"token string\">''</span>-._\n <span class=\"token punctuation\">(</span>    '      ,       .-<span class=\"token variable\">`</span></span>  <span class=\"token operator\">|</span> <span class=\"token variable\"><span class=\"token variable\">`</span>,    <span class=\"token punctuation\">)</span>     Running <span class=\"token keyword\">in</span> standalone mode\n <span class=\"token operator\">|</span><span class=\"token variable\">`</span></span>-._<span class=\"token variable\"><span class=\"token variable\">`</span>-<span class=\"token punctuation\">..</span>.-<span class=\"token variable\">`</span></span> __<span class=\"token punctuation\">..</span>.-.`<span class=\"token variable\"><span class=\"token variable\">`</span>-._<span class=\"token operator\">|</span>'<span class=\"token variable\">`</span></span> _.-<span class=\"token string\">'|     Port: 6379\n |    <span class=\"token variable\"><span class=\"token variable\">`</span>-._   <span class=\"token variable\">`</span></span>._    /     _.-'</span>    <span class=\"token operator\">|</span>     PID: 5725\n  <span class=\"token variable\"><span class=\"token variable\">`</span>-._    <span class=\"token variable\">`</span></span>-._  <span class=\"token variable\"><span class=\"token variable\">`</span>-./  _.-<span class=\"token string\">'    _.-'</span>\n <span class=\"token operator\">|</span><span class=\"token variable\">`</span></span>-._<span class=\"token variable\"><span class=\"token variable\">`</span>-._    <span class=\"token variable\">`</span></span>-.__.-'    _.-<span class=\"token string\">'_.-'</span><span class=\"token operator\">|</span>\n <span class=\"token operator\">|</span>    <span class=\"token variable\"><span class=\"token variable\">`</span>-._<span class=\"token variable\">`</span></span>-._        _.-<span class=\"token string\">'_.-'</span>    <span class=\"token operator\">|</span>           http://redis.io\n  <span class=\"token variable\"><span class=\"token variable\">`</span>-._    <span class=\"token variable\">`</span></span>-._<span class=\"token variable\"><span class=\"token variable\">`</span>-.__.-<span class=\"token string\">'_.-'</span>    _.-'\n <span class=\"token operator\">|</span><span class=\"token variable\">`</span></span>-._<span class=\"token variable\"><span class=\"token variable\">`</span>-._    <span class=\"token variable\">`</span></span>-.__.-<span class=\"token string\">'    _.-'</span>_.-'<span class=\"token operator\">|</span>\n <span class=\"token operator\">|</span>    <span class=\"token variable\"><span class=\"token variable\">`</span>-._<span class=\"token variable\">`</span></span>-._        _.-'_.-'    <span class=\"token operator\">|</span>\n  <span class=\"token variable\"><span class=\"token variable\">`</span>-._    <span class=\"token variable\">`</span></span>-._<span class=\"token variable\"><span class=\"token variable\">`</span>-.__.-<span class=\"token string\">'_.-'</span>    _.-'\n      <span class=\"token variable\">`</span></span>-._    <span class=\"token variable\"><span class=\"token variable\">`</span>-.__.-<span class=\"token string\">'    _.-'</span>\n          <span class=\"token variable\">`</span></span>-._        _.-<span class=\"token string\">'\n              `-.__.-'</span>\n\n5725:M 01 Feb 15:53:36.293 <span class=\"token comment\"># Server started, Redis version 3.0.7</span>\n5725:M 01 Feb 15:53:36.293 * DB loaded from disk: 0.000 seconds\n5725:M 01 Feb 15:53:36.293 * The server is now ready to accept connections on port 6379</code></pre></div>\n<p>不過你會發現，Redis 會佔用一個 terminal，相當不便。</p>\n<h6 id=\"homebrew-services\"><a href=\"#homebrew-services\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Homebrew Services</h6>\n<p>相信有些人可能會發現，在啟動 MariaDB 及 Redis 時，指令有些微的不同，沒有一個統一管理這些 services 的工具，像是 ubuntu 的 <code class=\"language-text\">service &lt;servicename&gt; start</code>。雖然 Homebrew 有提供 <code class=\"language-text\">launchctl</code> 來管理，不過操作起來實在是太麻煩了。其實 Homebrew 額外有提供一個 services 的管理工具，透過這個工具就可以統一管理所有的 services。</p>\n<h5 id=\"安裝-4\"><a href=\"#%E5%AE%89%E8%A3%9D-4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安裝</h5>\n<p>執行以下指令安裝：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew tap homebrew/services</code></pre></div>\n<p>如果你剛剛有透過指令啟動 MariaDB 與 Redis，現在我們先將它關閉。Redis 直接透過 <code class=\"language-text\">Ctrl + C</code> 關閉即可，MariaDB 請使用以下指令關閉：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mysql.server stop\nShutting down MySQL\n<span class=\"token punctuation\">..</span>. SUCCESS<span class=\"token operator\">!</span></code></pre></div>\n<h5 id=\"使用-4\"><a href=\"#%E4%BD%BF%E7%94%A8-4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用</h5>\n<p>使用以下指令可以查看目前所安裝的 services：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew services list\nName    Status  User Plist\nmariadb stopped\nphp70   stopped\nredis   stopped</code></pre></div>\n<p>很方便吧！接著我們來啟動 MariaDB 及 Redis：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew services start mariadb\n<span class=\"token operator\">==</span><span class=\"token operator\">></span> Successfully started <span class=\"token variable\"><span class=\"token variable\">`</span>mariadb<span class=\"token variable\">`</span></span> <span class=\"token punctuation\">(</span>label: homebrew.mxcl.mariadb<span class=\"token punctuation\">)</span>\n\n$ brew services start redis\n<span class=\"token operator\">==</span><span class=\"token operator\">></span> Successfully started <span class=\"token variable\"><span class=\"token variable\">`</span>redis<span class=\"token variable\">`</span></span> <span class=\"token punctuation\">(</span>label: homebrew.mxcl.redis<span class=\"token punctuation\">)</span></code></pre></div>\n<p>查看一下啟用之後的 services 列表：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew sercies list\nName    Status  User     Plist\nmariadb started jigsawye /Users/jigsawye/Library/LaunchAgents/homebrew.mxcl.mariadb.plist\nphp70   stopped\nredis   started jigsawye /Users/jigsawye/Library/LaunchAgents/homebrew.mxcl.redis.plist</code></pre></div>\n<p>若要關閉 servies，執行 <code class=\"language-text\">brew services stop &lt;servicename&gt;</code> 即可！</p>\n<h3 id=\"額外補充\"><a href=\"#%E9%A1%8D%E5%A4%96%E8%A3%9C%E5%85%85\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>額外補充</h3>\n<h6 id=\"多版本-php-切換\"><a href=\"#%E5%A4%9A%E7%89%88%E6%9C%AC-php-%E5%88%87%E6%8F%9B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>多版本 PHP 切換</h6>\n<p>在一些專案可能需不同的 PHP 版本來執行，以下就說明如何接換多版本的 PHP。</p>\n<h5 id=\"安裝其他版本的-php\"><a href=\"#%E5%AE%89%E8%A3%9D%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%AC%E7%9A%84-php\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安裝其他版本的 PHP</h5>\n<p>像前面說明的一樣，我們可以直接安裝其他版本的 PHP：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> php56\nError: Cannot <span class=\"token function\">install</span> homebrew/php/php56 because conflicting formulae are installed.\n\n  php70: because different php versions <span class=\"token function\">install</span> the same binaries.\n\nPlease <span class=\"token variable\"><span class=\"token variable\">`</span>brew unlink php70<span class=\"token variable\">`</span></span> before continuing.\n\nUnlinking removes a formula's symlinks from /usr/local. You can\n<span class=\"token function\">link</span> the formula again after the <span class=\"token function\">install</span> finishes. You can --force this\ninstall, but the build may fail or cause obscure side-effects <span class=\"token keyword\">in</span> the\nresulting software.</code></pre></div>\n<p>你應該看到這個錯誤，他的意思是指你已經安裝了其他版本的 PHP，請 <code class=\"language-text\">unlink</code> 其他版本後再安裝。<code class=\"language-text\">unlink</code> 意指你必須將原本綁的 <code class=\"language-text\">php70</code> 給卸除掉（並非移除），再接著安裝。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew unlink php70\n$ brew <span class=\"token function\">install</span> php56</code></pre></div>\n<p>接著就可以查看 PHP 版本，你應該切換成 PHP 5.6：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ php -v\nPHP 5.6.17 <span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>built: Jan  8 2016 10:27:48<span class=\"token punctuation\">)</span>\nCopyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 1997-2015 The PHP Group\nZend Engine v2.6.0, Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 1998-2015 Zend Technologies</code></pre></div>\n<h5 id=\"切換回-php-70\"><a href=\"#%E5%88%87%E6%8F%9B%E5%9B%9E-php-70\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>切換回 PHP 7.0</h5>\n<p>若要切換回去也相當簡單，<code class=\"language-text\">unlink</code> PHP 5.6 再 <code class=\"language-text\">link</code> PHP 7.0 即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew unlink php56\nUnlinking /usr/local/Cellar/php56/5.6.17<span class=\"token punctuation\">..</span>. 18 symlinks removed\n$ brew <span class=\"token function\">link</span> php70\nLinking /usr/local/Cellar/php70/7.0.2<span class=\"token punctuation\">..</span>. 17 symlinks created\n$ php -v\nPHP 7.0.2 <span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>built: Jan  7 2016 10:40:26<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> NTS <span class=\"token punctuation\">)</span>\nCopyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 1997-2015 The PHP Group\nZend Engine v3.0.0, Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 1998-2015 Zend Technologies</code></pre></div>\n<h6 id=\"php-extenstions\"><a href=\"#php-extenstions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PHP extenstions</h6>\n<p>有時你可能需要安裝 PHP 的 extenstions，像是為了產生 PHPUnit 的 coverage report 就必須安裝 Xdebug，為了提升執行速度則裝 OPCache。</p>\n<h5 id=\"安裝-extenstions\"><a href=\"#%E5%AE%89%E8%A3%9D-extenstions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安裝 extenstions</h5>\n<p>所有的 PHP extenstions 都是以 <code class=\"language-text\">phpXX-*</code> 來命名，也就是說如果你現在使用 PHP 7.0，那麼就會是 <code class=\"language-text\">php70-*</code>。讓我們來搜尋 PHP 7.0 有哪些 extenstions 可以安裝：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew search php70\nhomebrew/php/php70                  homebrew/php/php70-imagick          homebrew/php/php70-mongodb          homebrew/php/php70-pthreads\nhomebrew/php/php70-amqp             homebrew/php/php70-intl             homebrew/php/php70-msgpack          homebrew/php/php70-rdkafka\nhomebrew/php/php70-apcu             homebrew/php/php70-kafka            homebrew/php/php70-mustache         homebrew/php/php70-redis\nhomebrew/php/php70-apcu-bc          homebrew/php/php70-libsodium        homebrew/php/php70-oauth            homebrew/php/php70-snmp\nhomebrew/php/php70-ast              homebrew/php/php70-lzf              homebrew/php/php70-opcache          homebrew/php/php70-tidy\nhomebrew/php/php70-blitz            homebrew/php/php70-mailparse        homebrew/php/php70-pcntl            homebrew/php/php70-uuid\nhomebrew/php/php70-ev               homebrew/php/php70-mcrypt           homebrew/php/php70-pdo-dblib        homebrew/php/php70-v8js\nhomebrew/php/php70-gmp              homebrew/php/php70-mecab            homebrew/php/php70-pdo-pgsql        homebrew/php/php70-xdebug\nhomebrew/php/php70-hprose           homebrew/php/php70-memcached        homebrew/php/php70-pspell           homebrew/php/php70-yaml</code></pre></div>\n<p>你會看到一拖車的 extenstions，這邊我以 Xdebug 為例：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> php70-xdebug</code></pre></div>\n<p>然後看看你的 PHP 版本，Xdebug 應該已經安裝完成：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ php -v\nPHP 7.0.2 <span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>built: Jan  7 2016 10:40:26<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> NTS <span class=\"token punctuation\">)</span>\nCopyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 1997-2015 The PHP Group\nZend Engine v3.0.0, Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 1998-2015 Zend Technologies\n    with Xdebug v2.4.0RC3, Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 2002-2015, by Derick Rethans</code></pre></div>\n<h5 id=\"關閉-extenstions\"><a href=\"#%E9%97%9C%E9%96%89-extenstions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>關閉 extenstions</h5>\n<p>所有的 extenstions 啟用檔案都會存放在 <code class=\"language-text\">/usr/local/etc/php/X.X/conf.d/ext-*.ini</code>，以剛剛安裝的 Xdebug 為例，他的檔案會存放在 <code class=\"language-text\">/usr/local/etc/php/7.0/conf.d/ext-xdebug.ini</code>。若要關閉該 extenstions，用編輯器編輯他即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> vim /usr/local/etc/php/7.0/conf.d/ext-xdebug.ini</code></pre></div>\n<p>檔案內容很簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>xdebug<span class=\"token punctuation\">]</span>\nzend_extension<span class=\"token operator\">=</span><span class=\"token string\">\"/usr/local/opt/php70-xdebug/xdebug.so\"</span></code></pre></div>\n<p>若要關閉，把第二行註解掉在存檔即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>xdebug<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># zend_extension=\"/usr/local/opt/php70-xdebug/xdebug.so\"</span></code></pre></div>\n<p>註解完後就關閉了：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ php -v\nPHP 7.0.2 <span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>built: Jan  7 2016 10:40:26<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> NTS <span class=\"token punctuation\">)</span>\nCopyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 1997-2015 The PHP Group\nZend Engine v3.0.0, Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> 1998-2015 Zend Technologies</code></pre></div>\n<h3 id=\"done！\"><a href=\"#done%EF%BC%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Done！</h3>\n<p>到此就完成囉，其實安裝起來不會很困難，操作起來也很簡單。相比 *AMP 與 Homestead，使用的資源及容量也輕巧很多。希望本篇可以提供給操作 terminal 一段時間的人做參考，畢竟自幹環境比起一鍵安裝包安心多了 XD，想裝就裝，想砍就砍！</p>","fields":{"slug":"/2016/02/01/setup-laravel-development-environment-with-homebrew/"},"frontmatter":{"date":"2016-02-01T17:08:14.000Z","title":"在 OSX 使用 Homebrew 打造精巧的 Laravel 開發環境"}}},{"node":{"html":"<blockquote>\n<p>更新於 2017/1/10：Laravel 官方已推出 <a href=\"https://laravel.com/docs/5.3/broadcasting#receiving-broadcasts\">Laravel Echo</a>，可簡化整個建置流程，有興趣可前往參考。</p>\n</blockquote>\n<p>今天在逛 <a href=\"https://phphub.org\">PHPHub</a> 時剛好看到<a href=\"https://phphub.org/topics/1585\">這篇</a>，想著之前也想做類似 Facebook 的通知服務，剛好之前也有碰過一陣子的 socket.io，所以就試著實做看看了。不過推播通知在手機上是相當常見的，但在 Web 上不知為何卻相當少見，也可能是我見識太淺了，看過的網站太少 XD。</p>\n<p><a href=\"https://github.com/jigsawye/laravel-push-notification-demo\">本文的原始碼</a></p>\n<!-- more -->\n<h3 id=\"起手式\"><a href=\"#%E8%B5%B7%E6%89%8B%E5%BC%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>起手式</h3>\n<p>首先我們需要先建 Laravel 專案：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ laravel new notification\n$ <span class=\"token function\">cd</span> notification\n$ composer <span class=\"token function\">install</span>\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre></div>\n<p>設定你的 <code class=\"language-text\">.env</code>，除了資料庫外我們還會使用到<strong>隊列（Queue）</strong>及<strong>廣播（broadcast）</strong>，看起來會像：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash .env\"><pre class=\"language-bash .env\"><code class=\"language-bash .env\">...\nQUEUE_DRIVER=redis\nBROADCAST_DRIVER=redis\n...</code></pre></div>\n<p>要使用 Redis 必須在 Composer 安裝 <code class=\"language-text\">predis/predis</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ composer require predis/predis</code></pre></div>\n<p>接著執行遷移，跟 5.2 提供的 Auth scaffold（幫我們把 Auth 的部分連 View 都建完）：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ php artisan migrate\n$ php artisan make:auth</code></pre></div>\n<p>試試看應用程式有沒有正常執行，最後新增兩個使用者，看要在瀏覽器直接建立，或是其他方式也可以。</p>\n<h3 id=\"什麼是隊列\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF%E9%9A%8A%E5%88%97\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是隊列</h3>\n<p><a href=\"https://laravel.tw/docs/5.1/queues#introduction\">隊列</a>簡單來說就像是 JavaScript 的非同步機制，讓你把一個耗時的工作丟給別人做，你的程式會跳過這部分繼續執行。最常見到的案例就是寄 e-mail 跟簡訊。</p>\n<h3 id=\"什麼是廣播\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF%E5%BB%A3%E6%92%AD\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是廣播</h3>\n<p>我們會利用 Laravel 的<a href=\"https://laravel.tw/docs/5.1/events#broadcasting-events\">廣播事件</a>做推送通知的服務，開始之前建議大概瀏覽一下文件，廣播的方式大概如下圖：</p>\n<p><img src=\"https://i.imgur.com/LiEna61.png\" alt=\"Imgur\"></p>\n<p>流程如下：</p>\n<ul>\n<li>在 Laravel 執行一個推播通知事件</li>\n<li>推播通知事件的資訊會推送至 Redis 中</li>\n<li>Node 端會訂閱該 Redis 的頻道，接收到推播通知事件的資訊</li>\n<li>透過 websocket 將推播通知送給使用者</li>\n</ul>\n<h3 id=\"建立推播通知事件\"><a href=\"#%E5%BB%BA%E7%AB%8B%E6%8E%A8%E6%92%AD%E9%80%9A%E7%9F%A5%E4%BA%8B%E4%BB%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>建立推播通知事件</h3>\n<p>首先先讓我們建立一個推播通知事件，所有的推播都會透過此事件推送到 Redis：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ php artisan make:event PushNotification</code></pre></div>\n<p>程式碼如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>Event</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>SerializesModels</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Broadcasting<span class=\"token punctuation\">\\</span>ShouldBroadcast</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PushNotification</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Event</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ShouldBroadcast</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">SerializesModels</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @var string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$token</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @var string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$message</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">/**\n     * Create a new event instance.\n     *\n     * @param User $user\n     * @param      $message\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">token</span> <span class=\"token operator\">=</span> <span class=\"token function\">sha1</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">id</span> <span class=\"token punctuation\">.</span> <span class=\"token single-quoted-string string\">'|'</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">email</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">message</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$message</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\">/**\n     * Get the channels the event should be broadcast on.\n     *\n     * @return array\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">broadcastOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'notification'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>我們的事件會有兩個屬性，一個是要推播的 <code class=\"language-text\">message</code>，另一個比較特別的則是 <code class=\"language-text\">token</code>。<code class=\"language-text\">token</code> 會作為 socket.io 中 room 的名稱，代表一個使用者。也就是說一個使用者只會有一個 room（<code class=\"language-text\">token</code>），這麼做可以讓我們指定要推播給哪個使用者。</p>\n<p><code class=\"language-text\">broadcastOn</code> 則是設定在 Redis 中的頻道名稱，我們會在 socket.io server 端透過這個名稱來訂閱由此事件傳遞的資訊。</p>\n<p>若不太明白可以先接著往下看，會有更詳細的說明。</p>\n<blockquote>\n<p><code class=\"language-text\">token</code> 的雜湊方式可以隨你喜歡更改，但要確定每次雜湊出來的值都相同，因為我們在 render view 給使用者的時候也會雜湊一組 token 給前端的 JavaScript，以加入 socket.io 中特定的 room。</p>\n</blockquote>\n<h3 id=\"建立-socketio-server\"><a href=\"#%E5%BB%BA%E7%AB%8B-socketio-server\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>建立 Socket.io Server</h3>\n<p>我們的 socket.io 會有兩個任務：</p>\n<ul>\n<li>接收由 Laravel 的 PushNotification 事件送來的推播資訊</li>\n<li>將內容透過 websocket 推播給使用者</li>\n</ul>\n<p>讓我們先使用 npm 安裝必要的套件：分別是 <code class=\"language-text\">express</code>（http server）、<code class=\"language-text\">socket.io</code>（websocket server）及 <code class=\"language-text\">ioredis</code>（訂閱 redis）：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> express socket.io ioredis --save</code></pre></div>\n<p>接著我們建立 <code class=\"language-text\">socket.js</code>，先寫 redis 部份的程式碼測試與 Laravel 廣播事件的串接是否有問題：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> Redis <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ioredis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> redis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Redis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 訂閱 redis 的 notification 頻道，也就是我們在事件中 broadcastOn 所設定的</span>\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notification'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 當該頻道接收到訊息時就列在 terminal 上</span>\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span> notification<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notification<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h6 id=\"測試與-laravel-是否正確串接\"><a href=\"#%E6%B8%AC%E8%A9%A6%E8%88%87-laravel-%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A2%BA%E4%B8%B2%E6%8E%A5\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>測試與 Laravel 是否正確串接</h6>\n<p>首先你必須先確認這些東西有沒有執行：</p>\n<ul>\n<li>Laravel Application（Nginx or <code class=\"language-text\">php artisan serve</code>）</li>\n<li>Redis server</li>\n<li>隊列監聽器（<code class=\"language-text\">php artisan queue:listen</code>）</li>\n<li>socket.io server（<code class=\"language-text\">node socket.js</code>）</li>\n</ul>\n<p>確認完畢後，我們進入 Laravel 的 Tinker 做測試：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ php artisan tinker</code></pre></div>\n<p><img src=\"https://i.imgur.com/THwUJG2.gif\" alt=\"Imgur\"></p>\n<p>我們直接觸發事件：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">event</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>PushNotification</span><span class=\"token punctuation\">(</span>App\\<span class=\"token package\">User</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'banana!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>你應該在 node 的 terminal 看到：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"event\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"App\\\\Events\\\\PushNotification\"</span>,<span class=\"token string\">\"data\"</span>:<span class=\"token punctuation\">{</span><span class=\"token string\">\"token\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"long-hash-string\"</span>,<span class=\"token string\">\"message\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"banana!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"連接前端與-socketio\"><a href=\"#%E9%80%A3%E6%8E%A5%E5%89%8D%E7%AB%AF%E8%88%87-socketio\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>連接前端與 socket.io</h3>\n<h6 id=\"前端\"><a href=\"#%E5%89%8D%E7%AB%AF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前端</h6>\n<p>首先我們必須先安裝 <code class=\"language-text\">socket.io-client</code>，這是 socket.io 在前端所使用的套件，我們會透過 server side 的開發方式，再透過 elixir 的 browserify 轉成前端可執行的 JavaScript。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> socket.io-client --save</code></pre></div>\n<p>建立 <code class=\"language-text\">resources/assets/js/app.js</code>，撰寫以下程式碼：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> io <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'socket.io-client'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 建立 socket.io 的連線</span>\n<span class=\"token keyword\">var</span> notification <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 當從 socket.io server 收到 notification 時將訊息印在 console 上</span>\nnotification<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notification'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著修改 <code class=\"language-text\">gulpfile.js</code>，然後執行 <code class=\"language-text\">gulp</code>，他會將編譯結果放在 <code class=\"language-text\">public/js/app.js</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">elixir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>mix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mix<span class=\"token punctuation\">.</span><span class=\"token function\">browserify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著我們希望在 <code class=\"language-text\">/home</code> 能接收推播（5.2 的 <code class=\"language-text\">make:auth</code> 預設提供 <code class=\"language-text\">/home</code> 作為登入後的首頁），所以先在 <code class=\"language-text\">resources/views/layouts/app.blade.php</code> 下方加上 <code class=\"language-text\">@yield(&#39;scripts&#39;)</code> ，看起來會像這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    ...\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span>\n\n    @yield('content')\n\n    @yield('scripts')\n\n    <span class=\"token comment\">&lt;!-- JavaScripts --></span>\n    {{-- <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{{ elixir(<span class=\"token punctuation\">'</span>js/app.js<span class=\"token punctuation\">'</span>) }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span> --}}\n    ...</code></pre></div>\n<p>然後在 <code class=\"language-text\">resources/views/home.blade.php</code> 下面載入剛剛寫好的 JavaScript：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">@section('content')\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/js/app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n@endsection</code></pre></div>\n<h6 id=\"後端\"><a href=\"#%E5%BE%8C%E7%AB%AF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>後端</h6>\n<p>修改剛剛的 <code class=\"language-text\">socket.js</code>，增加 socket.io 及推送通知至前端的程式碼：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Server</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> io <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'socket.io'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Redis <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ioredis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> redis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Redis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notification'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span> notification<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notification<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  notification <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>notification<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 將訊息推播給使用者</span>\n  io<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notification'</span><span class=\"token punctuation\">,</span> notification<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 監聽 3000 port</span>\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Listening on Port 3000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著就可以測試前端是否可以收到通知了！</p>\n<p><img src=\"https://i.imgur.com/zDsnFdd.gif\" alt=\"Imgur\"></p>\n<h3 id=\"區分使用者\"><a href=\"#%E5%8D%80%E5%88%86%E4%BD%BF%E7%94%A8%E8%80%85\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>區分使用者</h3>\n<p>如果你有開不同瀏覽器登入不同使用者的話會發現，不管你在事件的 <code class=\"language-text\">User</code> 傳入誰，每個使用者都會收到通知。</p>\n<p>因為所有使用者都屬於同一個 channel（<code class=\"language-text\">notification</code>）。這時就要使用 <code class=\"language-text\">token</code> 及 socket.io 的 room 來區分使用者。每個 <code class=\"language-text\">token</code> 代表一個 room，也就是一個使用者，我們就可以由 Laravel 廣播事件內的 token 決定要接推播通知傳給哪個使用者：</p>\n<p><img src=\"https://i.imgur.com/MgYnVql.png\" alt=\"Imgur\"></p>\n<h6 id=\"前端-1\"><a href=\"#%E5%89%8D%E7%AB%AF-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前端</h6>\n<p>我們要做的事情有：</p>\n<ul>\n<li>在 Controller 產生 <code class=\"language-text\">token</code>（與事件中的相同），並傳遞至 View</li>\n<li>前端的 JavaScript 取得 <code class=\"language-text\">token</code>，並傳給 socket.io server 加入指定的 room</li>\n</ul>\n<p>首先，先修改 <code class=\"language-text\">HomeControllr@index</code></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**\n * Show the application dashboard.\n *\n * @return Response\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$token</span> <span class=\"token operator\">=</span> <span class=\"token function\">sha1</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">id</span> <span class=\"token punctuation\">.</span> <span class=\"token single-quoted-string string\">'|'</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">email</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接著修改剛剛新增在 <code class=\"language-text\">resources/views/home.blade.php</code> 的部分，將 <code class=\"language-text\">token</code> 傳至 JavaScript 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">...\n@section('content')\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    Notification<span class=\"token punctuation\">.</span><span class=\"token constant\">TOKEN</span> <span class=\"token operator\">=</span> <span class=\"token string\">'{{ $token or null }}'</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/js/app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n@endsection</code></pre></div>\n<p>修改 <code class=\"language-text\">resources/assets/js/app.js</code>，使用 <code class=\"language-text\">token</code> 加入使用者的 room：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> io <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'socket.io-client'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> notification <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 當連接到 socket.io server 時觸發 set-token 設定使用者的 room</span>\nnotification<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  notification<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'set-token'</span><span class=\"token punctuation\">,</span> Notification<span class=\"token punctuation\">.</span><span class=\"token constant\">TOKEN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnotification<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notification'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h6 id=\"後端-1\"><a href=\"#%E5%BE%8C%E7%AB%AF-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>後端</h6>\n<p>修改 <code class=\"language-text\">socket.js</code>，讓使用者加入屬於他的 room，並由 Laravel 廣播事件資訊內的 token 決定要傳給哪個使用者（room）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Server</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> io <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'socket.io'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Redis <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ioredis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> redis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Redis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notification'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nio<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 當使用者觸發 set-token 時將他加入屬於他的 room</span>\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'set-token'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token:'</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span> notification<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notification<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  notification <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>notification<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 使用 to() 指定傳送的 room，也就是傳遞給指定的使用者</span>\n  io<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token:'</span> <span class=\"token operator\">+</span> notification<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'notification'</span><span class=\"token punctuation\">,</span>\n    notification<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 監聽 3000 port</span>\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Listening on Port 3000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"demo\"><a href=\"#demo\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Demo</h3>\n<p><img src=\"https://i.imgur.com/Ar2N95e.gif\" alt=\"Imgur\"></p>\n<p>基本上前端收的到通知之後，如何呈現就不是困難的問題了。</p>\n<p><a href=\"https://github.com/jigsawye/laravel-push-notification-demo\">本文的原始碼</a></p>\n<h3 id=\"後記\"><a href=\"#%E5%BE%8C%E8%A8%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>後記</h3>\n<p>實作其實沒那麼困難，不過如果真的要上 Production 的話還是得再思考一下！因為感覺這個 Solution 沒有很透徹 XD！</p>\n<p>像是 token 的部分這樣安全性不知道會不會不佳，如果想更安全可以用更複雜的演算法，或是在 Laravel 跟 socket.io server 用相同的加密演算法，互相加解密也可以。作法應該還很多種，有厲害的大大還麻煩幫忙補充 XD</p>","fields":{"slug":"/2015/12/22/push-notification-to-user-in-laravel-5/"},"frontmatter":{"date":"2015-12-22T01:01:00.000Z","title":"在 laravel 5 實作瀏覽器推播通知"}}},{"node":{"html":"<p>在 OSX 的終端機連線至 PTT，會因為編碼問題而產生亂碼。</p>\n<!-- more -->\n<p><img src=\"https://i.imgur.com/GjlWFlm.png\" alt=\"Imgur\"></p>\n<h3 id=\"使用-ssh-連線\"><a href=\"#%E4%BD%BF%E7%94%A8-ssh-%E9%80%A3%E7%B7%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 SSH 連線</h3>\n<p>其實我們只要改用 SSH 連線至 PTT 就可以解決這個問題了：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> bbsu@ptt.cc</code></pre></div>\n<p><img src=\"https://i.imgur.com/ECvy9dH.png\" alt=\"Imgur\"></p>","fields":{"slug":"/2015/12/06/ptt-in-osx-terminal/"},"frontmatter":{"date":"2015-12-06T20:21:51.000Z","title":"在 OSX 的終端機正常瀏覽 PTT"}}},{"node":{"html":"<p>在使用 SSH 連線到遠端主機時，常常因為一段時間未動作而逾時斷線。要避免這樣的情形發生，\n只要設定自己的 SSH 設定即可。</p>\n<!-- more -->\n<h3 id=\"編輯-ssh-設定檔\"><a href=\"#%E7%B7%A8%E8%BC%AF-ssh-%E8%A8%AD%E5%AE%9A%E6%AA%94\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>編輯 SSH 設定檔</h3>\n<p>打開 <code class=\"language-text\">~/.ssh/config</code> 檔案（如果沒有就建一個），加入以下：</p>\n<p>`<code class=\"language-text\"></code>bash ~/.ssh/config\nhost *\nServerAliveInterval 60\n# 每 60 秒傳送一次封包</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">這麼做就會每 60 秒發送一次封包到遠端主機以保持連線。</code></pre></div>","fields":{"slug":"/2015/12/06/prevent-ssh-disconnect/"},"frontmatter":{"date":"2015-12-06T20:11:11.000Z","title":"防止 SSH 因長時間未動作而斷線"}}},{"node":{"html":"<p>之前在練著寫 React Native 時詢問過開發 iOS 的朋友，能不能將 App 燒至自己的裝置上。當時好像因為 Apple 規範的關係，必須加入 <a href=\"https://developer.apple.com/programs/\">Developer Program</a> 並 <strong>年付 $99</strong> 取得憑證才行。而因為我沒有打算上架到 App Store 上所以只好放棄付錢作罷。</p>\n<p>最近剛好想寫一些自己的工具，又試著上網找了一下資料，發現在 XCode 7 之後已經開放未付費也可以燒至裝置上了，因此紀錄一下。</p>\n<!-- more -->\n<h3 id=\"加入-apple-id-至-xcode\"><a href=\"#%E5%8A%A0%E5%85%A5-apple-id-%E8%87%B3-xcode\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>加入 Apple ID 至 XCode</h3>\n<p>將 iDevice 透過 USB 連接，並在 XCode 選擇你的裝置：</p>\n<p><img src=\"https://i.imgur.com/HGGifKc.png\" alt=\"Imgur\"></p>\n<p>按工具列的執行或 cmd + R 執行，接著會跳出錯誤告知你需要有效的憑證，這邊我們點 <strong>Fix issue</strong>：</p>\n<p><img src=\"https://i.imgur.com/Tljrdon.png\" alt=\"Imgur\"></p>\n<p>如果你沒有 Apple ID 或是還沒加入 Developer Program，就選左邊的 <strong>Join a Program</strong>，如果你已經有了，就選擇 <strong>Add</strong> 並填入你的 Apple ID：</p>\n<p><img src=\"https://i.imgur.com/WGyf0ML.png\" alt=\"Imgur\"></p>\n<p>接著你就可以看到帳號已經加入完成：</p>\n<p><img src=\"https://i.imgur.com/YH7fVvM.png\" alt=\"Imgur\"></p>\n<h3 id=\"將-app-build-至-idevice-上\"><a href=\"#%E5%B0%87-app-build-%E8%87%B3-idevice-%E4%B8%8A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>將 App Build 至 iDevice 上</h3>\n<p>接著我們在 Build 一次，又跳出了一個錯誤，得知是安全性的問題：</p>\n<p><img src=\"https://i.imgur.com/a5HlxgO.png\" alt=\"Imgur\"></p>\n<p>打開你的裝置，依序選擇 <strong>設定</strong>-><strong>一般</strong>-><strong>描述檔</strong>-><code class=\"language-text\">你的 Apple ID</code>-><strong>信任「<code class=\"language-text\">你的 Apple ID</code>」</strong>：</p>\n<p><img src=\"https://i.imgur.com/CBfukCF.png\" alt=\"Imgur\"></p>\n<h3 id=\"執行你的-app\"><a href=\"#%E5%9F%B7%E8%A1%8C%E4%BD%A0%E7%9A%84-app\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>執行你的 App</h3>\n<p>完成後就可以執行你的 App 了，然後又出現了錯誤，因為路徑是 localhost，所以讀不到 bundle 檔案：</p>\n<p><img src=\"https://i.imgur.com/ZhD7Riq.png\" alt=\"Imgur\"></p>\n<p>打開 XCode，在你的 Project 裡找到 <code class=\"language-text\">AppDelgate.m</code> 檔案，將 <code class=\"language-text\">jsCodeLocation</code> 中的 <code class=\"language-text\">localhost</code> 修改成你的 IP：</p>\n<p><img src=\"https://i.imgur.com/lFZT9Ey.png\" alt=\"Imgur\"></p>\n<h3 id=\"done\"><a href=\"#done\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Done!</h3>\n<p>完成！別忘了搖晃裝置可以叫出 dev menu，記得打開 Live Reload 讓開發更方便！</p>\n<p><img src=\"https://i.imgur.com/qIEfPzq.png\" alt=\"Imgur\"></p>","fields":{"slug":"/2015/11/30/running-react-native-on-device/"},"frontmatter":{"date":"2015-11-30T23:16:22.000Z","title":"在 iDevice 上執行 React Native（不需付費）"}}},{"node":{"html":"<p>真正開始寫 <a href=\"https://facebook.github.io/react/\">React</a> 大概是這一兩個月的時間吧，印象中前幾個月正火紅的時候，觀望著開發架構，從 Facebook 剛開始的 <a href=\"https://github.com/facebook/flux\">Flux</a>，一路看到 <a href=\"https://github.com/BinaryMuse/fluxxor\">fluxxor</a>、<a href=\"https://github.com/goatslacker/alt\">alt</a> 這些 Library 等等，真的是多到爆，然後那個 Flux 的概念圖看了不下 N 次，但還是不得其門而入。</p>\n<p>直到不久前出現了一個叫 <a href=\"github.com/rackt/redux\">Redux</a> 的東西，剛好有新 project 要用 React 寫，看著各方大神推薦就順勢跳進 Redux 的世界了。最近也利用 Redux 寫了個 <a href=\"https://github.com/jigsawye/node-proxy-manager-client\">Proxy manager</a>，趁最近期中考完，回頭寫一下 Redux 的核心概念。</p>\n<!-- more -->\n<!-- toc -->\n<h3 id=\"那些在-react-遇到的麻煩事\"><a href=\"#%E9%82%A3%E4%BA%9B%E5%9C%A8-react-%E9%81%87%E5%88%B0%E7%9A%84%E9%BA%BB%E7%85%A9%E4%BA%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那些在 React 遇到的麻煩事</h3>\n<p>你會有個 Root Component，然後它負責：</p>\n<ul>\n<li>有一株肥美的 state tree（狀態樹）管理下層元件的資料</li>\n<li>有一坨負責處理資料的 function 透過 props 傳遞給下層元件呼叫，以改變上面那棵樹</li>\n</ul>\n<p>所以呢，Facebook 就建議了一種 Flux 架構，把那些 function 及 state tree 給抽出來集中管理。</p>\n<h3 id=\"為什麼選-redux\"><a href=\"#%E7%82%BA%E4%BB%80%E9%BA%BC%E9%81%B8-redux\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>為什麼選 Redux</h3>\n<p>以我來說有這幾個原因：</p>\n<ul>\n<li>概念很簡單，只要清楚 Actions 及 Reducer 就可以開始實做了</li>\n<li>API 很少，而且只是幾個單純的 function，還有很方便的 Middleware 可以用</li>\n<li>有完善的 devtools，可回溯的 state</li>\n<li>社群資源多，而且我觀察台灣大多數 React 開發者都選用 Redux</li>\n<li>官方文件有中文版（<a href=\"http://chentsulin.github.io/redux/\">由此去</a>），而且有完整的 step by step example</li>\n</ul>\n<h3 id=\"所以那個流程\"><a href=\"#%E6%89%80%E4%BB%A5%E9%82%A3%E5%80%8B%E6%B5%81%E7%A8%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>所以那個流程</h3>\n<p>我以很常見的 counter（計數器）為例，假設我要將目前的數字 + 1：</p>\n<ul>\n<li>dispatch（發送）一個 increment（+ 1）的 Action（動作）</li>\n<li>管理 counter 的 reducer 接收到 action 後將 state 中目前的數字 + 1</li>\n<li>state tree 及 reducers 由 store 集中管理，並由 React 取用</li>\n</ul>\n<h6 id=\"action\"><a href=\"#action\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action</h6>\n<p>就以剛剛的 Todo 為例，actions 基本上就只是一個 JavaScript 物件，只需要定義好這個 action 的 type（類型）即可，當這個 action 被 dispatch 時，這個物件就會被傳至 reudcer，所以若有資料需要傳入，只需要加在這個 action 物件中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INCREMENT'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一般來說會向下方這樣把 type 定義成常數做取用，不過這邊就盡量精簡化了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">INCREMENT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h6 id=\"reducer\"><a href=\"#reducer\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reducer</h6>\n<p>reducer 則是一個 function，負責接收被 dispatch 的 action 並處理 state，要注意的是需傳入兩個參數到這個 function，第一個是目前的 state，第二個則是我們定義的 action 物件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 在這邊回傳處理好的 state</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就是這麼簡單的 function，要注意的是，初始化的時候 state 是空的，所以在第一個參數放了預設的 state。\n接著就是撰寫處理 state 的部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>還記得在 action 定義的 type 吧？我們會在 reducer 中根據 action 物件中的 type 去對應要執行的動作，接著回傳處理完的 state。</p>\n<h6 id=\"store\"><a href=\"#store\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store</h6>\n<p>我們現在知道了定義的 action 及處理 state 的 reducer，最後我們則需要透過 redux 的 <code class=\"language-text\">createStore</code> 將 reducer 轉換成 store：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果透過瀏覽器的方式執行的話可以寫成下面這樣</span>\n<span class=\"token comment\">// const { createStore } = Redux;</span>\n\n<span class=\"token comment\">// 產生 store</span>\n<span class=\"token keyword\">let</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>對，就這麼一行，接著你就可以開始透過 action 操作 state 了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 透過 getState() 取得目前的 state</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 透過 dispatch() 發送我們剛剛所定義的 action</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INCREMENT'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 看執行後的 state</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"done\"><a href=\"#done\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Done!</h3>\n<p>想像一下，Redux 就是個超級狀態機，藉由我們定義的 action 去改變 state。而我們只用了 Redux 提供的 <code class=\"language-text\">createStore()</code> 產生 store，API 相當簡單。上面的程式我放在 <a href=\"http://jsbin.com/conezo/edit?js,console\">jsbin</a> 上，點右上角的 run 即可看執行的結果。搞懂基本概念後，接著可以去查看<a href=\"http://rackt.org/redux/docs/basics/Actions.html\">官方文件的 Todo Example</a>，或是 Redux 的 Creator <a href=\"https://github.com/gaearon\">Dan Abramov</a> 在 egghead 上的<a href=\"https://egghead.io/lessons/javascript-redux-the-single-immutable-state-tree?series=getting-started-with-redux\">影片教學</a>。</p>\n<h3 id=\"references\"><a href=\"#references\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li><a href=\"http://rackt.org/redux/\">http://rackt.org/redux/</a></li>\n</ul>","fields":{"slug":"/2015/11/29/instruction-with-redux/"},"frontmatter":{"date":"2015-11-29T11:23:33.000Z","title":"Redux 起手式：Actions、Reducers 及 Store"}}},{"node":{"html":"<p>Sublime Text 除了有內建的標籤自動補齊，最有名的 pakcage 就是 <a href=\"http://emmet.io/\">Emmet</a> 了。Emmet 一直以來是寫 HTML 的神器，除了原本支援 HTML 外，其實已經支援了 JSX。但在 Sublime Text 的 JSX 中不額外設定的話是無法正常使用的，其實只要修改一下 Key Binding 就可以了。</p>\n<!-- more -->\n<h3 id=\"安裝\"><a href=\"#%E5%AE%89%E8%A3%9D\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安裝</h3>\n<p>如果你沒有安裝 Emmet，請先進行<a href=\"https://github.com/sergeche/emmet-sublime#how-to-install\">安裝</a>。</p>\n<h3 id=\"設定\"><a href=\"#%E8%A8%AD%E5%AE%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>設定</h3>\n<p>打開 <code class=\"language-text\">Sublime Text</code> -> <code class=\"language-text\">Preferences</code> -> <code class=\"language-text\">Key Bindings - User</code>，增加以下：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"keys\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tab\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"expand_abbreviation_by_tab\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"context\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"operand\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"source.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"operator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"equal\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"match_all\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"selector\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"match_all\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"selection_empty\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"operator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"equal\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"operand\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"match_all\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"has_next_field\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"operand\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"operator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"equal\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"match_all\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto_complete_visible\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"match_all\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"is_abbreviation\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"demo\"><a href=\"#demo\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Demo</h3>\n<p>當然，在 JSX 中的 Emmet 也會自動使用 <code class=\"language-text\">className</code> 替代 <code class=\"language-text\">class</code>，<code class=\"language-text\">htmlFor</code> 替代 <code class=\"language-text\">for</code> ⋯⋯ 等等的 JSX 語法。</p>\n<p><img src=\"https://i.imgur.com/mgkaOqz.gif\" alt=\"Demo\"></p>","fields":{"slug":"/2015/11/23/enable-emmet-for-jsx-in-sublime/"},"frontmatter":{"date":"2015-11-23T15:45:20.000Z","title":"在 Sublime Text 的 JSX 中使用 Emmet"}}},{"node":{"html":"<blockquote>\n<p>更新於 2017/1/10：Docker 官方已推出 <a href=\"https://docs.docker.com/docker-for-mac/\">Docker for Mac</a>，若有需求請前往該站參考，本安裝方式已不適用。</p>\n</blockquote>\n<blockquote>\n<p>本文建議了解 unix-like 基礎指令及 Docker 基本操作者閱讀。</p>\n</blockquote>\n<p>雖然 Docker 官方推薦使用 <a href=\"https://www.docker.com/toolbox\">Docker Toolbox</a>，不過我個人很不喜歡這種一鍵安裝包，連啟動還要用 GUI。可是動手搜尋 <code class=\"language-text\">docker via homebrew</code> 之類的關鍵字，出來的結果都是使用舊的 <code class=\"language-text\">boot2docker</code>（目前為 <code class=\"language-text\">docker-machine</code>），所以找不到只好自己做個紀錄了。</p>\n<!-- more -->\n<!-- toc -->\n<h3 id=\"安裝及設定\"><a href=\"#%E5%AE%89%E8%A3%9D%E5%8F%8A%E8%A8%AD%E5%AE%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安裝及設定</h3>\n<h6 id=\"安裝-docker-及-docker-machine\"><a href=\"#%E5%AE%89%E8%A3%9D-docker-%E5%8F%8A-docker-machine\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安裝 docker 及 docker-machine</h6>\n<p>首先更新 <code class=\"language-text\">homebrew</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">❯ brew update</code></pre></div>\n<p>接著先安裝 <code class=\"language-text\">docker</code> 及 <code class=\"language-text\">docker-machine</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">❯ brew <span class=\"token function\">install</span> docker docker-machine</code></pre></div>\n<h6 id=\"啟動-docker-machine\"><a href=\"#%E5%95%9F%E5%8B%95-docker-machine\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>啟動 docker-machine</h6>\n<p>我們要透過 <code class=\"language-text\">docker-machine</code> 建立並啟動一個 VM 作為 docker 的環境，這邊我使用的 driver 為 VirtualBox，名字設定為 default：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">❯ docker-machine create --driver virtualbox default</code></pre></div>\n<p>接下來為重點，我們執行 <code class=\"language-text\">docker-machine env default</code>，可以查看 <code class=\"language-text\">default</code> 所設定的參數，而這些參數用於指定 <code class=\"language-text\">docker</code> 的 client 所要連線的參數：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">❯ docker-machine <span class=\"token function\">env</span> default\n<span class=\"token function\">export</span> DOCKER_TLS_VERIFY<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span>\n<span class=\"token function\">export</span> DOCKER_HOST<span class=\"token operator\">=</span><span class=\"token string\">\"tcp://192.168.99.100:2376\"</span>\n<span class=\"token function\">export</span> DOCKER_CERT_PATH<span class=\"token operator\">=</span><span class=\"token string\">\"/Users/jigsawye/.docker/machine/machines/default\"</span>\n<span class=\"token function\">export</span> DOCKER_MACHINE_NAME<span class=\"token operator\">=</span><span class=\"token string\">\"default\"</span>\n<span class=\"token comment\"># Run this command to configure your shell:</span>\n<span class=\"token comment\"># eval \"$(docker-machine env default)\"</span></code></pre></div>\n<p>在最後一行有提示 <code class=\"language-text\">Run this command to configure your shell</code>，所以我們直接在 terminal 執行，用於參數設定至 shell 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">❯ <span class=\"token function\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>docker-machine <span class=\"token function\">env</span> default<span class=\"token variable\">)</span></span>\"</span></code></pre></div>\n<p>不過這樣的話每次開新的 terminal 都要執行一次，所以你可以把這行指令新增到你的 <code class=\"language-text\">~/.bashrc</code>（or <code class=\"language-text\">~/.zshrc</code> etc）：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash .zshrc\"><pre class=\"language-bash .zshrc\"><code class=\"language-bash .zshrc\">...\n# configure the shell\neval &quot;$(docker-machine env default)&quot;\n...</code></pre></div>\n<h3 id=\"enjoy\"><a href=\"#enjoy\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enjoy!</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">❯ docker images\nREPOSITORY        TAG        IMAGE ID        CREATED        VIRTUAL SIZE</code></pre></div>\n<h3 id=\"故障排除\"><a href=\"#%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>故障排除</h3>\n<p>如果沒執行 <code class=\"language-text\">eval &quot;$(docker-machine env default)&quot;</code> 設定 <code class=\"language-text\">docker</code> clinet 需要的參數，在執行指令時會顯示錯誤：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">❯ docker images\nGet http://%2Fvar%2Frun%2Fdocker.sock/v1.20/containers/json: dial unix /var/run/docker.sock: connect: no such <span class=\"token function\">file</span> or directory.\n* Are you trying to connect to a TLS-enabled daemon without TLS?\n* Is your docker daemon up and running?</code></pre></div>\n<h3 id=\"reference\"><a href=\"#reference\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://docs.docker.com/installation/mac/#from-your-shell\">Reference</a></h3>","fields":{"slug":"/2015/10/10/install-docker-on-mac-via-homebrew/"},"frontmatter":{"date":"2015-10-10T02:01:40.000Z","title":"在 Mac 上使用 Homebrew 安裝 Docker"}}},{"node":{"html":"<blockquote>\n<p>本文延續 <a href=\"/2015/10/05/jsdc-2015-day-1/\">Day 1</a></p>\n</blockquote>\n<p>第一天結束之後，晚上我去淡水我朋友借住一天。淡水跟南港展覽館格有夠遠...來回要一個小時多，所以二天早上八點出發，到會場已經九點半了，導致我第一個 topic 完全沒聽到，虧大了！</p>\n<!-- more -->\n<h3 id=\"day-2\"><a href=\"#day-2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Day 2</h3>\n<h6 id=\"tooling-with-threejs\"><a href=\"#tooling-with-threejs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tooling with Three.js</h6>\n<p>如上文，這個 topic 我完全沒聽到...。不過看了一下簡報，<code class=\"language-text\">Three.js</code> 是用來做 WebGL 的 JavaScript Library，可以用來做 Web 的 Game、Animation...等等，本身也有很多的開發工具可以用，在 Github 上也有 20000+ 的 Star，是相當成熟的 Library，未來有機會也許會試著接觸看看！</p>\n<h6 id=\"build-anything-with-javascript\"><a href=\"#build-anything-with-javascript\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build Anything with JavaScript</h6>\n<p>講者主要介紹 Arduino 及相關的 IoT 設備，最後則講到他們開發的 Webduino。可能是因為前一天看過超 OP 的自幹 CNC 機器，所以在這場相對的沒有那麼讓我感到特別。基本上 Webduino 就是讓 Arduino 可以透過 HTML + JavaScript 的方式做開發，讓前端工程師也能享受操縱 IoT 的快感！不過比較可惜的是，因為當天網路環境相當惡劣，所以有些東西沒有 Demo，滿可惜的。</p>\n<h6 id=\"react-native-實戰-融入現有-ios-app\"><a href=\"#react-native-%E5%AF%A6%E6%88%B0-%E8%9E%8D%E5%85%A5%E7%8F%BE%E6%9C%89-ios-app\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Native 實戰! 融入現有 iOS App</h6>\n<p>使用 React Native 可以開發 native 的 app，但也可以結合至原有的 native app！講者先說明 React Native 的運作原理後，在講述自己將 React Native 整合至原本 native app 中。</p>\n<p>React Native 運作原理：\n<img src=\"https://i.imgur.com/UhOvrhv.png\" alt=\"Imgur\"></p>\n<p>Demo 的時候講者在修改程式碼時，iOS app 也會跟著 live reloading，相當厲害！而且同樣的程式碼也能同時應用在 Android app！不過講者有提到，如果要銜接原生 app 的功能的話，必須會寫 Objective-C / Java 的原生 app，所以講者一直提到他叫原廠幫他修改原生的地方 XD。</p>\n<p>個人覺得 React 開始在侵略整個世界了，等到未來趨近於穩定的時候，一定會有更多人投入這部分的開發，畢竟 React 的初衷就是：</p>\n<blockquote>\n<p>Learn once, write anywhere.</p>\n</blockquote>\n<p>會了 React，可以同時開發 Web 及 App，何樂而不為呢 XD</p>\n<h6 id=\"workshop-on-control-flow-w-es2015-and-beyond\"><a href=\"#workshop-on-control-flow-w-es2015-and-beyond\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Workshop on Control Flow w/ ES2015 and beyond.</h6>\n<p>講者是 <a href=\"https://github.com/koajs/koa\">koa.js</a> 及 <a href=\"https://github.com/tj/co\">co</a> 的作者 <a href=\"https://github.com/jonathanong\">Jonathon</a>，講題是在說 ES2015 的控制流程，主要都是在講 JavaScript 的非同步機制及解決方法。講者很細心整理了在開發 node.js 時常遇到的一些問題，跟對應的解決方案，最讓我感興趣的就是 ES2016 的 <code class=\"language-text\">async</code> 及 <code class=\"language-text\">await</code>，但是現在好像沒有很完整的實作。在簡報結束後時間好像剩我滿多的，所以都變成 Q&#x26;A 的時間，會眾問了不少問題，然後從講者身上挖到不少經驗及常用的工具或套件 XD，我覺得最好笑的就是有個會眾問：</p>\n<blockquote>\n<p>Q:「Do you have any good way to determine a callback function is a asynchronous callback?」</p>\n<p>「No. It sucks!」- Jonathon, JSDC 2015</p>\n</blockquote>\n<h6 id=\"building-hybrid-mobile-apps-with-ionic-framework-and-angularjs\"><a href=\"#building-hybrid-mobile-apps-with-ionic-framework-and-angularjs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building Hybrid Mobile Apps with Ionic Framework and AngularJS</h6>\n<p>其實這場只是因為想聽下場的講題，怕去 R2 回來就沒位置了，所以都在做自己的事 XD。以前我寫過 AngularJS 一陣子，後來發現 React 後就轉投入 React 的懷抱了。其實在 React Native 或 NativeScript 等等，用於產生 native app 的作法前，使用 AngularJS 這種框架來建立 Hybrid app 是其中一種使用非原生語言開發 app 主流，使用 codova（PhoneGap）或是 ionic 來建立。</p>\n<p>但是這種作法一直令人詬病的就是效能問題，因為基底就是 Web，而行動裝置的效能本身就不如一般的電腦，所以在使用上的 UX 相當的不好。但是講者有提到目前的行動裝置效能日漸提升，或許未來也會有 Hybrid app 的一片天呢。</p>\n<h6 id=\"react-test-and-material-design-lite--react？\"><a href=\"#react-test-and-material-design-lite--react%EF%BC%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Test and Material Design Lite + React？</h6>\n<p>講者 xpsteven 之前在 React.tw 發佈他們的 mdl-react 的時候我就關注他了 XD，感覺是個思維相當新的人。在這個 topic 他分享了測試的辛酸史，前前後後失敗了四次之有，跟國父革命有得拼！講者的結論就是直接做 UI 的 E2E test 就好，還有能花「錢」解決就花下去，效益比較好，接著最後就做了 live demo。</p>\n<p>其實我一直在 Unit test 跟 E2E test 間做比較，我個人認為 Unit test 是首要完成的測試，因為 E2E test 是在測試的頂層，一般來說會比 Unit test 難處理，不過講者的結論也讓我想想是不是有這麼一回事，或許 E2E 才是會好解決的測試方案呢 XD。</p>\n<p><img src=\"http://2.bp.blogspot.com/-X__Rsznxdg4/TzPVWfte5ZI/AAAAAAAAAD0/Y1dWLNEW4zI/s1600/img1.jpg\"></p>\n<p>最後獻上講者的上班攻防經驗：</p>\n<blockquote>\n<p>寫測試是一種防禦，避免同事做的蠢事害自己加班。提交 Bug Issue 是一種攻擊，讓同事加班 LOL。</p>\n<ul>\n<li>Xpsteven, JSDC 2015</li>\n</ul>\n</blockquote>\n<h3 id=\"lighting-talk\"><a href=\"#lighting-talk\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lighting Talk</h3>\n<p>印象最深刻的就是<a href=\"https://chrome.google.com/webstore/detail/%E9%84%89%E6%B0%91%E6%9F%A5%E6%B0%B4%E8%A1%A8/kdcgipkhkbeipbooplfcdgclhecfngfi?hl=zh-TW\">鄉民查水表</a>跟 <a href=\"http://mrt.express/\">MRT Express</a>，後者還說他達成了大台北捷運 1XX 站抵達的成就 XD。</p>\n<h3 id=\"後記\"><a href=\"#%E5%BE%8C%E8%A8%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>後記</h3>\n<p>今年要參加的時候發現票價真的不是我這學生負擔得起的，不過還好 JSDC 有提供<a href=\"http://jsdc-tw.kktix.cc/events/jsdc2015s\">學生獎勵計畫</a>，運氣很好也拿到資格。這也是我今年參加的第二個 Conference，上一次則是 COSCUP。參加這種 Conference 好處就是可以聽到很多技術的新知，也有在業界的開發經驗。以學生的角度真的可以學到不少未來工作的技能，而且我本身也很喜歡接觸新技術，所以即使很累我也覺得很值得啊！</p>","fields":{"slug":"/2015/10/07/jsdc-2015-day-2/"},"frontmatter":{"date":"2015-10-07T11:23:00.000Z","title":"JSDC 2015 會後筆記（Day 2）"}}},{"node":{"html":"<blockquote>\n<p>以下開發情境為 ES2015（ES6）</p>\n</blockquote>\n<p>一般在寫 React 的時候，通常會希望資料是 immutable（不可變的），讓開發時對資料的流向即處理更容易，所以通常會使用 <code class=\"language-text\">Object.assign</code> 來複制 object。但今天在寫時遇到一個問題，我一直以為 <code class=\"language-text\">Object.assign</code> 會連同子項目都複製，結果兩個不同的資料改 A 竟然連 B 都跟著動，就做個紀錄。</p>\n<!-- more -->\n<p>假設我們有個 object，接著透過 <code class=\"language-text\">Object.assign</code> 複製兩個 object：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  childrenKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  childrenObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    keyA<span class=\"token punctuation\">:</span> <span class=\"token string\">'value a'</span><span class=\"token punctuation\">,</span>\n    keyB<span class=\"token punctuation\">:</span> <span class=\"token string\">'value b'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> cloneA <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cloneB <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>改變 <code class=\"language-text\">cloneA</code> 中 <code class=\"language-text\">childrenKey</code> 的 value，<code class=\"language-text\">cloneB</code> 中 <code class=\"language-text\">childrenKey</code> 的 value 並不會被改變：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cloneA<span class=\"token punctuation\">.</span>childrenKey <span class=\"token operator\">=</span> <span class=\"token string\">'change value'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// cloneA</span>\n<span class=\"token punctuation\">{</span>\n  childrenKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'change value'</span><span class=\"token punctuation\">,</span>\n  childrenObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    keyA<span class=\"token punctuation\">:</span> <span class=\"token string\">'value a'</span><span class=\"token punctuation\">,</span>\n    keyB<span class=\"token punctuation\">:</span> <span class=\"token string\">'value b'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// cloneB</span>\n<span class=\"token punctuation\">{</span>\n  childrenKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  childrenObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    keyA<span class=\"token punctuation\">:</span> <span class=\"token string\">'value a'</span><span class=\"token punctuation\">,</span>\n    keyB<span class=\"token punctuation\">:</span> <span class=\"token string\">'value b'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可是當改變 <code class=\"language-text\">childrenObject</code> 的值時，卻會連動改變：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cloneA<span class=\"token punctuation\">.</span>childrenObject<span class=\"token punctuation\">.</span>keyA <span class=\"token operator\">=</span> <span class=\"token string\">'change value a'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// cloneA</span>\n<span class=\"token punctuation\">{</span>\n  childrenKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'change value'</span><span class=\"token punctuation\">,</span>\n  childrenObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    keyA<span class=\"token punctuation\">:</span> <span class=\"token string\">'change value a'</span><span class=\"token punctuation\">,</span>\n    keyB<span class=\"token punctuation\">:</span> <span class=\"token string\">'value b'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// cloneB</span>\n<span class=\"token punctuation\">{</span>\n  childrenKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  childrenObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    keyA<span class=\"token punctuation\">:</span> <span class=\"token string\">'change value a'</span><span class=\"token punctuation\">,</span>\n    keyB<span class=\"token punctuation\">:</span> <span class=\"token string\">'value b'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>原因是 <code class=\"language-text\">Object.assign</code> 只會對 object 的子項目做 clone，下一層的則會建立 reference，所以指向的 <code class=\"language-text\">childrenObject</code> 會是同一個。\n要解決這個問題的話可以使用 <code class=\"language-text\">lodash</code> 的 <code class=\"language-text\">clonedeep</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> cloneDeep <span class=\"token operator\">=</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash.clonedeep'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  childrenKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  childrenObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    keyA<span class=\"token punctuation\">:</span> <span class=\"token string\">'value a'</span><span class=\"token punctuation\">,</span>\n    keyB<span class=\"token punctuation\">:</span> <span class=\"token string\">'value b'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> cloneA <span class=\"token operator\">=</span> <span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cloneB <span class=\"token operator\">=</span> <span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>或是使用 <a href=\"https://facebook.github.io/immutable-js/\">immutable.js</a>。</p>\n<p>reference: <a href=\"http://boke.io/immutable-js/\">搞定immutable.js</a></p>","fields":{"slug":"/2015/10/06/javascript-object-assign/"},"frontmatter":{"date":"2015-10-06T18:05:14.000Z","title":"JavaScript 的 Object.assign 陷阱"}}},{"node":{"html":"<p>JSDC 全名是 JavaScript Developer Conference，是台灣所有 JavaScript 開發者的年度盛會。</p>\n<p>今年 JSDC 的 <strong>Build anything with JavaScript</strong> 包含了 iOS App、Android App、Arduino...等等，涵蓋了各式各樣的議題，不僅僅侷限於 Web，會後也有 Lighting talk 這種有趣的活動，讓會眾也能參與議題分享，還有吃（X）。整體來說 JSDC 是每年吸收 JavaScript 新知的好活動。</p>\n<!-- more -->\n<h3 id=\"day-1\"><a href=\"#day-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Day 1</h3>\n<p>第一天比較辛苦的就是活動在台北，而我人在台中，所以五點左右就起床準備搭車了，到了中研院也差不多快九點了。這裡就把我聽的幾場 topic 做簡單的紀錄。</p>\n<h6 id=\"react-navigation-system\"><a href=\"#react-navigation-system\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Navigation System</h6>\n<p>這場的講者是 Hedger，是 Facebook 的 React Native 開發者。主要在分享開發 facebook ads manager 所遇到的一些問題：因為 web 與 app 的 navigation 實作機制的不同，他們想解決這個問題，做出可以跨平台的 navigation。</p>\n<p>我理解無誤的話（說實話這場對我來說有點 high level，有些地方聽不太懂），他們自幹了一個在頂層的 navigation 來管理所有的 route，取代掉原生 App 的機制，不過因為剛開始投影機有點怪，所以簡報不清楚，我也沒看清楚他是如何實作的。</p>\n<p>在這場唯一理解到的就是，React Native 是個很厲害的技術，聽到他們將 App 由 iOS 移轉到 Android 上竟然 reuse 80% 的 Code，實在是很令人欽佩啊，有機會一定要實做看看。</p>\n<h6 id=\"javascript-開發流程自動化懶人包\"><a href=\"#javascript-%E9%96%8B%E7%99%BC%E6%B5%81%E7%A8%8B%E8%87%AA%E5%8B%95%E5%8C%96%E6%87%B6%E4%BA%BA%E5%8C%85\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript 開發流程自動化懶人包</h6>\n<p>講者講述在開發 JavaScript 時的 workflow，其實有點像在介紹 DevOps 該做的事情。不過因為我自己也有在研究 DevOps 的相關技術，所以在聽時就比較像在複習一般。但是講者有提到很多沒用過的工具，當然就先把名字抄起來等日後有時間再研究啦。</p>\n<h6 id=\"用-javascript-實現微電腦自動控制不是夢！\"><a href=\"#%E7%94%A8-javascript-%E5%AF%A6%E7%8F%BE%E5%BE%AE%E9%9B%BB%E8%85%A6%E8%87%AA%E5%8B%95%E6%8E%A7%E5%88%B6%E4%B8%8D%E6%98%AF%E5%A4%A2%EF%BC%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用 JavaScript 實現微電腦自動控制不是夢！</h6>\n<p>只能說這講者太猛了，前面在講 JavaScript 與 Arduino，使用哪些 Library，實作 Led、Motor、Servo...等等，這些其實都不新奇，剛開始還覺得怎麼在分享這麼稀鬆平常的東西。接著講到機械手臂時我倒覺得滿厲害的！沒想到接下來的東西真的讓我跪在會場了...他花了三個月的時間自幹了一台 CNC 機器（沒錯，從零開始自己買零件組裝），還自幹了 Web UI 來控制（<a href=\"https://github.com/cheton/cnc.js\">cnc.js</a>）。最讓我佩服的是，他是一個 F2E Developer，竟然在做 Maker 做的事，整體完成度還相當高。</p>\n<p><img src=\"http://cheton.github.io/jsdc2015/images/demo/cnc/cnc-sample-sanding.jpg\"></p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fJyq4fyiGSc\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n<h6 id=\"building-single-page-apps-with-aurelia\"><a href=\"#building-single-page-apps-with-aurelia\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building Single-Page Apps with Aurelia</h6>\n<p>這場請到 <a href=\"http://aurelia.io/\">Aurelia</a> 的 contributor <a href=\"https://github.com/davismj\">Matt</a> 分享 SPA（Single Page Application）與 Aurelia。開頭在講解 SPA 的一些眉眉角角，接著就介紹 Aurelia 及它的一些特性。</p>\n<p>其實之前就看過 Aurelia 這個 Framework，JavaScript 用到了 ES7（ES 2015），是相當前衛的 Framework，雖然自己沒有寫過，不過感覺未來會崛起，與 React 及 Angular 並行。</p>\n<h6 id=\"技術演進的大亂鬥\"><a href=\"#%E6%8A%80%E8%A1%93%E6%BC%94%E9%80%B2%E7%9A%84%E5%A4%A7%E4%BA%82%E9%AC%A5\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>技術演進的大亂鬥</h6>\n<p>基本上就是介紹目前 Front-end 在使用的一些技術，講題中大概 90% 都有聽過，所以沒有很難理解。只是有點感傷，前端技術真的不停的在轉換。</p>\n<blockquote>\n<p>學 frontend 很倒霉（認同請分享）- Casear Chu, JSDC 2015</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/NmT1KX6.png\" alt=\"Imgur\"></p>\n<h6 id=\"transducer\"><a href=\"#transducer\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transducer</h6>\n<p>慚愧啊...這場聽到睡著，從 mapreduce 之後都沒聽到，不過感覺滿像在上數學課的，當時位置也做很後面，看不太到簡報，滿累的一場。</p>\n<h6 id=\"tdd-的開發哲學，以-nodejs-為例\"><a href=\"#tdd-%E7%9A%84%E9%96%8B%E7%99%BC%E5%93%B2%E5%AD%B8%EF%BC%8C%E4%BB%A5-nodejs-%E7%82%BA%E4%BE%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDD 的開發哲學，以 nodejs 為例</h6>\n<p>講者是在業界有開發多年經驗的開發者，目前擔任 leader，主要是在講述在開發時使用 TDD 的心法跟介紹。其實關於 test 我自己也有嘗試練習過，也看過很多文件跟心得，不過一直很難在實作中用上。</p>\n<p>結束後我問了講者幾個問題，主要是問怎麼將測試導入至專案中，其實在寫測試時最讓我困惑的大概就是寫出完整的測試程式，但是有些測試又不太好寫，講者給我的建議是：「由大功能好寫的測試先寫，再逐一切分功能寫測試」。所以目前正在研究 test 的部分，畢竟 test 的優點是在任何程式語言都能用到的技巧，只要學起來必定能在各個語言中如魚得水。</p>\n<h6 id=\"web-components--the-next-generation-ads\"><a href=\"#web-components--the-next-generation-ads\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Components &#x26; the next generation ADs</h6>\n<p>這場根本是第一天的壓軸 XD，太好笑了。講者 Paul 演講起很正經，可是又會穿插很好笑的梗！這場講的 Web Component 是個很厲害的技術，把 HTML5 都包裝成 Component，可以直接在 HTML 中使用，未來可能會成為主流，不過現在的<a href=\"http://caniuse.com/#search=component\">支援度</a>實在是太差了，只有 Google Chrome 全數支援，期待未來幾年在其他瀏覽器中實作。接著講到 Web Component 在廣告中的應用，真的讓 UX 提升一定的級數，之後的 E2E Test Demo 也很驚艷，讓會眾都相當激動 XD。</p>\n<h6 id=\"day-2\"><a href=\"#day-2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"/2015/10/07/jsdc-2015-day-2/\">Day 2</a></h6>","fields":{"slug":"/2015/10/05/jsdc-2015-day-1/"},"frontmatter":{"date":"2015-10-05T13:32:21.000Z","title":"JSDC 2015 會後筆記（Day 1）"}}},{"node":{"html":"<blockquote>\n<p>更新於 2017/1/10：此文年久失修，可能有許多情形與現實不符，請斟酌參考。</p>\n</blockquote>\n<blockquote>\n<p>本文建議了解 unix-like 基礎指令及 Docker 基本操作者閱讀。</p>\n</blockquote>\n<p>這幾天在我們的 imaclab 試著建置 CI 環境，順便就學了 Docker，發現 Docker 這東西真的非常方便，直接把環境都放進 container 裡，也不怕把環境搞爛。對環境建置的苦手真的是一番福音，網路上也很多關於 Docker 的文章，在這邊也不贅述了。\n原本在架設的時候想使用 Gitlab + Jenkins，不過因專案的需求沒有需要 Jenkins 這麼開放客製化的 CI 工具（其實是我覺得很囉唆一堆東西要設定），剛好 Gitlab 也有提供 CI，需求上也符合，所以就決定使用 Gitlab + Gitlab CI。</p>\n<!-- more -->\n<h3 id=\"gitlab\"><a href=\"#gitlab\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gitlab</h3>\n<p>以自行架設私有的版本控制環境來說，Gitlab 肯定是首選（因為我不知道還有哪些版控可以自己架），很久以前曾經自己在 ubuntu 上用官方提供的一鍵安裝包裝過一次，用過這種懶人包的都知道，裝的時候完全不知道發生什麼事，尤其當時還很菜。那時是成功架起來沒錯，不過完全不知道發生了什麼事。</p>\n<h6 id=\"環境\"><a href=\"#%E7%92%B0%E5%A2%83\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>環境</h6>\n<p>我是直接用了學長架的 OpenStack 叢集開一個 instance 當建置環境，基本上要照這份筆記安裝 Gitlab CE，應該只要隨便一個有裝 Docker 的 unix-like 系統都可以。</p>\n<p><img src=\"https://i.imgur.com/sCxpbLf.png\" alt=\"Imgur\"></p>\n<h6 id=\"安裝\"><a href=\"#%E5%AE%89%E8%A3%9D\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安裝</h6>\n<p>透過 Docker 安裝 Gitlab CE 很簡單，只要在 <a href=\"https://hub.docker.com\">Docker Hub</a> 上找 gitlab 就可以找到很多的 images，我選了 star 最多的 <a href=\"https://hub.docker.com/r/sameersbn/gitlab/\">sameersbn/gitlab</a> ，基本上只要照 image 的文件做就可以了。</p>\n<p>首先將 <code class=\"language-text\">sameersbn/gitlab</code> 的 image pull 下來。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker pull sameersbn/gitlab:8.0.2</code></pre></div>\n<p>接著有兩種方式可以啟動 Gitlab：最簡單的是使用 <code class=\"language-text\">docker-compose</code>，透過設定檔啟動。另外就是手動執行 <code class=\"language-text\">docker run</code> 指令將 gitlab 所需的 service 逐一啟動。這邊我選擇後者，因為我沒裝 docker-compose，未來有安裝在補充這部分的使用方式。</p>\n<p>除了 Gitlab 本身，他還需要額外啟用 <code class=\"language-text\">PostgreSQL</code> 及 <code class=\"language-text\">Redis</code> 的 servcie，基本上只要按照文件啟動 container 就可以了：</p>\n<p>啟動 PostgreSQL container：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run --name gitlab-postgresql -d \\\n    --env <span class=\"token string\">'DB_NAME=gitlabhq_production'</span> \\\n    --env <span class=\"token string\">'DB_USER=gitlab'</span> --env <span class=\"token string\">'DB_PASS=password'</span> \\\n    --volume /srv/docker/gitlab/postgresql:/var/lib/postgresql \\\n    sameersbn/postgresql:9.4-3</code></pre></div>\n<p>啟動 Redis container：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run --name gitlab-redis -d \\\n    --volume /srv/docker/gitlab/redis:/var/lib/redis \\\n    sameersbn/redis:latest</code></pre></div>\n<p>最後啟動 Gitlab container。這邊要注意我除了照原文件之外，還額外加上 <code class=\"language-text\">GITLAB_HOST</code>，因為我的建置環境不在本機上，所以要加上該環境的 ip，否則 user 的大頭貼會是死圖。另外指令中的 <code class=\"language-text\">long-and-random-alpha-numeric-string</code> 請替換成一組隨機字串，可以使用 <code class=\"language-text\">pwgen -Bsv1 64</code> 來產生：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run --name gitlab -d \\\n    --link gitlab-postgresql:postgresql --link gitlab-redis:redisio \\\n    --publish 10022:22 --publish 10080:80 \\\n    --env <span class=\"token string\">'GITLAB_HOST=your-gitlab-ip'</span> \\\n    --env <span class=\"token string\">'GITLAB_PORT=10080'</span> --env <span class=\"token string\">'GITLAB_SSH_PORT=10022'</span> \\\n    --env <span class=\"token string\">'GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string'</span> \\\n    --volume /srv/docker/gitlab/gitlab:/home/git/data \\\n    sameersbn/gitlab:8.0.2</code></pre></div>\n<h6 id=\"完成！\"><a href=\"#%E5%AE%8C%E6%88%90%EF%BC%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完成！</h6>\n<p><img src=\"https://i.imgur.com/nzIAG0F.png\" alt=\"Imgur\"></p>\n<p>打開瀏覽器瀏覽 <code class=\"language-text\">http://your-gitlab-ip:10080</code>，就可以看到 Gitlab 架設好了，輸入預設的帳號密碼就可以直接登入：</p>\n<ul>\n<li>username: <strong>root</strong></li>\n<li>password: <strong>5iveL!fe</strong></li>\n</ul>\n<h3 id=\"gitlab-ci\"><a href=\"#gitlab-ci\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gitlab CI</h3>\n<p>這次安裝的時候原本第一天裝 Gitlab CE 7.14.3，Gitlab CI 還要另外做安裝，後來更新到 8.0.0 的時候 Gitlab 把 CI 整合進了 Gitlab CE 裡，所以只需要裝 Gitlab CE 就包含了 CI 的功能了！兩個願望一次滿足！</p>\n<p>以下以簡單的 Node.js project 為例，做一次完整的 CI Flow：</p>\n<h6 id=\"建立-repository\"><a href=\"#%E5%BB%BA%E7%AB%8B-repository\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>建立 repository</h6>\n<p>首先在 Gitlab 上建立一個 <code class=\"language-text\">ci-flow</code> 的 repository：</p>\n<p><img src=\"https://i.imgur.com/KSkMits.png\" alt=\"Imgur\"></p>\n<p>接著點選 CI 選項，點選 <strong>Add project to CI</strong> 將剛剛建立的 <code class=\"language-text\">ci-flow</code> 加入至 CI 中：</p>\n<p><img src=\"https://i.imgur.com/wvhHuHd.png\" alt=\"Imgur\"></p>\n<p>點選 runner 分頁，記下 url 及 token：</p>\n<p><img src=\"https://i.imgur.com/i1kpNnD.png\" alt=\"Imgur\"></p>\n<h6 id=\"gitlab-runner\"><a href=\"#gitlab-runner\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gitlab-runner</h6>\n<p>什麼是 <code class=\"language-text\">gitlab-runner</code> 呢？簡單來說就是透過這個 runner 去執行 CI 所要執行的工作。例如我以 docker 做測試環境，runner 會建立預先設定好 image 的 container，CI 被觸發時會自動 start 該 container，並把 repository pull 至 container 內，接著執行指定的動作。在這部分我們要安裝及設定 <code class=\"language-text\">gitlab-runner</code>，並註冊讓它執行。</p>\n<p>透過 Docker 安裝 gitlab-runner，參考<a href=\"https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/docker.md\">官方文件</a>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -d --name gitlab-runner --restart always \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v /srv/gitlab-runner/config:/etc/gitlab-runner \\\n  gitlab/gitlab-runner:latest</code></pre></div>\n<p>執行 gitlab-runner 進行註冊，這邊的 url 及 token 就是剛剛 runner 分頁對應的資料。其餘部分根據需求做選擇，像我不需要 DB 的 Service 所以一律 enter 略過：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">exec</span> -it gitlab-runner gitlab-runner register\n\nPlease enter the gitlab-ci coordinator URL <span class=\"token punctuation\">(</span>e.g. https://gitlab.com/ci <span class=\"token punctuation\">)</span>\nhttps://your-gitlab-ip:10080/ci\n\nPlease enter the gitlab-ci token <span class=\"token keyword\">for</span> this runner\nyour-gitlab-ci-token\n\nPlease enter the gitlab-ci description <span class=\"token keyword\">for</span> this runner\n<span class=\"token punctuation\">[</span>86598ea6394b<span class=\"token punctuation\">]</span>: node-4.1.1\n\nINFO<span class=\"token punctuation\">[</span>0034<span class=\"token punctuation\">]</span> 08cc0e60 Registering runner<span class=\"token punctuation\">..</span>. succeeded\nPlease enter the executor: docker, docker-ssh, ssh, shell, parallels:\n<span class=\"token punctuation\">[</span>shell<span class=\"token punctuation\">]</span>: docker\n\nPlease enter the Docker image <span class=\"token punctuation\">(</span>eg. ruby:2.1<span class=\"token punctuation\">)</span>:\nnode:4.1.1\n\nIf you want to <span class=\"token function\">enable</span> mysql please enter version <span class=\"token punctuation\">(</span>X.Y<span class=\"token punctuation\">)</span> or enter latest?\n\nIf you want to <span class=\"token function\">enable</span> postgres please enter version <span class=\"token punctuation\">(</span>X.Y<span class=\"token punctuation\">)</span> or enter latest?\n\nIf you want to <span class=\"token function\">enable</span> redis please enter version <span class=\"token punctuation\">(</span>X.Y<span class=\"token punctuation\">)</span> or enter latest?\n\nIf you want to <span class=\"token function\">enable</span> mongo please enter version <span class=\"token punctuation\">(</span>X.Y<span class=\"token punctuation\">)</span> or enter latest?\n\nINFO<span class=\"token punctuation\">[</span>0045<span class=\"token punctuation\">]</span> Runner registered successfully. Feel <span class=\"token function\">free</span> to start it, but <span class=\"token keyword\">if</span> it's running already the config should be automatically reloaded<span class=\"token operator\">!</span></code></pre></div>\n<p>現在前往 CI 的 runner 分頁應該就會看到 node-4.1.1 並且是 active 的。</p>\n<p><img src=\"https://i.imgur.com/ku19Gss.png\" alt=\"Imgur\"></p>\n<blockquote>\n<p>注意，這邊我們要編輯 node-4.1.1 這個 runner，並增加名為 node-4.1.1 的 tag 讓 CI 能夠啟動對應的 runner。</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/N2dSh45.png\" alt=\"Imgur\"></p>\n<h6 id=\"建立-project\"><a href=\"#%E5%BB%BA%E7%AB%8B-project\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>建立 project</h6>\n<p>建立一個 project，並使用 <code class=\"language-text\">npm init</code>（enter 到底就可以了）產生 <code class=\"language-text\">package.json</code>，接著安裝 node.js 的測試工具 <code class=\"language-text\">mocha</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> ci-flow\n<span class=\"token function\">cd</span> ci-flow\n<span class=\"token function\">npm</span> init\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> mocha --save-dev</code></pre></div>\n<p>接著建立檔案 <code class=\"language-text\">test/test.js</code> 並撰寫簡單的測試程式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js test/test.js\"><pre class=\"language-js test/test.js\"><code class=\"language-js test/test.js\">var assert = require(&#39;assert&#39;);\n\ndescribe(&#39;Array&#39;, function() {\n  describe(&#39;#indexOf()&#39;, function() {\n    it(&#39;should return -1 when the value is not present&#39;, function() {\n      assert.equal(-1, [1, 2, 3].indexOf(5));\n      assert.equal(-1, [1, 2, 3].indexOf(0));\n    });\n  });\n});</code></pre></div>\n<p>寫完測試當然要在 local 測試一下，直接執行 project 中安裝的 <code class=\"language-text\">./node_modules/mocha/bin/mocha</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./node_modules/mocha/bin/mocha\n\n  Array\n    <span class=\"token comment\">#indexOf()</span>\n      ✓ should <span class=\"token keyword\">return</span> -1 when the value is not present\n\n\n  1 passing <span class=\"token punctuation\">(</span>9ms<span class=\"token punctuation\">)</span></code></pre></div>\n<p>測試成功！接著我們來設定 CI 所要使用的 image 及執行的 script。</p>\n<h6 id=\"gitlab-ciyml\"><a href=\"#gitlab-ciyml\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.gitlab-ci.yml</h6>\n<p>重點來了，我們要在專案的根目錄建立 <code class=\"language-text\">.gitlab-ci.yml</code> 的檔案，用於決定 Gitlab CI 要如何對專案 build、test、deploy...等等，類似於 Travis CI 的 <code class=\"language-text\">.travis.yml</code>。詳細的可用選項可以參考<a href=\"http://doc.gitlab.com/ci/yaml/README.html\">官方文件</a>，這邊以我的例子做解說：\n<code class=\"language-text\">before_script</code> 是執行 job 前會執行的 script，我在這邊設定安裝 node 的 dependencies，也就是 <code class=\"language-text\">mocha</code> 這個 test tool。<code class=\"language-text\">stages</code> 為設定有幾種工作階段，一般可能就會有 <code class=\"language-text\">build</code>、<code class=\"language-text\">test</code>、<code class=\"language-text\">deploy</code>，並按照順序逐一執行對應的 job，我這邊單獨以 <code class=\"language-text\">test</code> 做例子。接著制定第一個 job，對應的就是 <code class=\"language-text\">test</code> 這個 stage，在 <code class=\"language-text\">script</code> 增加執行 project 內的 <code class=\"language-text\">mocha</code> 做測試，並指在 <code class=\"language-text\">master</code> 這個 branch，最後加上一個 <code class=\"language-text\">node-4.1.1</code> 的 tag 去啟動對應 tag 為 <code class=\"language-text\">node-4.1.1</code> 的 <code class=\"language-text\">gitlab-runner</code>，因為一般在測試時可能會針對多個不同版本的環境做測試，所以會使用 tag 這個功能來做設定。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby .gitlab-ci.yml\"><pre class=\"language-ruby .gitlab-ci.yml\"><code class=\"language-ruby .gitlab-ci.yml\">before_script:\n  - npm install\nstages:\n  - test\njob1:\n  stage: test\n  script:\n    - ./node_modules/mocha/bin/mocha\n  only:\n    - master\n  tags:\n    - node-4.1.1</code></pre></div>\n<p>在版本控制上並不希望 <code class=\"language-text\">node_modules</code> 放入版本控制中，所以增加 <code class=\"language-text\">.gitignore</code> 檔案並排除該目錄：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> .gitignore\n<span class=\"token keyword\">echo</span> node_modules <span class=\"token operator\">></span> .gitignore</code></pre></div>\n<p>加入版本控制：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init\n<span class=\"token function\">git</span> add <span class=\"token keyword\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">'Test gitlab-ci with &lt;3'</span></code></pre></div>\n<p>Push 至 Repository：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote add origin your-project-repository\n<span class=\"token function\">git</span> push -u origin master</code></pre></div>\n<p>最後等待 CI 自動執行測試！</p>\n<h6 id=\"執行結果\"><a href=\"#%E5%9F%B7%E8%A1%8C%E7%B5%90%E6%9E%9C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>執行結果</h6>\n<p>Push 至 Repository 後可以在 CI 的 Dashboard 看見剛剛的 commit 已經 pending 了：</p>\n<p><img src=\"https://i.imgur.com/P8qn1rQ.png\" alt=\"Imgur\"></p>\n<p>點進去後可以看到目前須執行的所有 job，根據你的 <code class=\"language-text\">.gitlab-ci.yml</code> 而定，一般來說會在多個環境測試，並包含 deploy 等多種不同的 job：</p>\n<p><img src=\"https://i.imgur.com/HElBwtE.png\" alt=\"Imgur\"></p>\n<p>等待一段時間後就成功就會顯示 Success：</p>\n<p><img src=\"https://i.imgur.com/rLqbgsW.png\" alt=\"Imgur\"></p>\n<p>你也可以點進 build 中看執行的結果：</p>\n<p><img src=\"https://i.imgur.com/h3B39rH.png\" alt=\"Imgur\"></p>\n<h6 id=\"slack-integration\"><a href=\"#slack-integration\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slack Integration</h6>\n<p>Gitlab CI 也有提供 Slack 的整合，提供即時的 CI 狀態，只要填入 Webhook 即可：</p>\n<p><img src=\"https://i.imgur.com/eh79dAw.png\" alt=\"Imgur\"></p>\n<h3 id=\"總結\"><a href=\"#%E7%B8%BD%E7%B5%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>總結</h3>\n<p>搞了三天左右都在學 Docker 跟弄這些環境，在精疲力乏與中秋烤肉之際順便記錄一下過程。\n文中一些細節可以在根據需求做修改，像是在 test 的 docker image 就可以把 <code class=\"language-text\">mocha</code> 裝進去，不用在 project 中額外安裝。Gitlab 的 CI 雖然不像 Jenkins CI 那麼容易的客製化，但是基本的功能也能滿足一些需求。當然 Gitlab CI 的功能我可能也沒完全摸透，可能有更強大的功能也說不定。</p>\n<p>另外未來還會串上 CD，另外加開一台 staging 的 instance 來 deploy，之後若串起來有空再寫下一篇分享。</p>","fields":{"slug":"/2015/09/25/gitlab-ce-in-docker/"},"frontmatter":{"date":"2015-09-25T19:23:30.000Z","title":"使用 Docker 建置 Gitlab CE 的 Source Control 及 CI 環境"}}},{"node":{"html":"<blockquote>\n<p>本文適用於 Laravel 5.0 以上版本。</p>\n</blockquote>\n<h4 id=\"什麼是-route-model-binding？\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-route-model-binding%EF%BC%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 Route Model Binding？</h4>\n<blockquote>\n<p>Laravel model binding provides a convenient way to inject class instances into your routes. For example, instead of injecting a user's ID, you can inject the entire User class instance that matches the given ID.\n(<a href=\"http://laravel.com/docs/5.0/routing#route-model-binding\">http://laravel.com/docs/5.0/routing#route-model-binding</a>)</p>\n</blockquote>\n<!-- more -->\n<p>中文版：</p>\n<blockquote>\n<p>Laravel 模型綁定提供方便的方式將模型實例注入到你的路由中。例如，比起注入 User 的 ID ，你可以選擇注入符合給定 ID 的 User 類別實例。\n(<a href=\"http://laravel.tw/docs/5.0/routing#route-model-binding\">http://laravel.tw/docs/5.0/routing#route-model-binding</a>)</p>\n</blockquote>\n<p>文字敘述不懂沒關係，更快的方式就是舉個例子，假設我們有一個 Resource Route 及對應的 Resource Controller：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'articles'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'ArticlesController'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticlesController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 省略七個標準 RESTful method</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一般來說，在 <code class=\"language-text\">show</code> method 裡我們通常會這樣實作：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$article</span> <span class=\"token operator\">=</span> Article<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'articles.show'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'article'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是只要透過 Route Model Binding，我們的程式碼就可以改成這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>Article <span class=\"token variable\">$article</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'articles.show'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'article'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>對於我這種超懶的開發者很受用，少寫一行算一行，幫助開發更快速。</p>\n<h4 id=\"設定-route-model-binding\"><a href=\"#%E8%A8%AD%E5%AE%9A-route-model-binding\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>設定 Route Model Binding</h4>\n<h5 id=\"綁定-model\"><a href=\"#%E7%B6%81%E5%AE%9A-model\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>綁定 Model</h5>\n<p>一般來說都會將綁定設定在 <code class=\"language-text\">RouteServiceProvider</code>（App/Provider/RouteServiceProvider.php）中，在這裡我用上述的範例做綁定：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span>Router <span class=\"token variable\">$router</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">parent</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$router</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$router</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'articles'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'App\\Article'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接著在我們的 method 直接使用 type-hine 注入 Model，就可以直接存取 <code class=\"language-text\">$article</code> 了：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>Article <span class=\"token variable\">$article</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'article.show'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'article'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>也就是說，如果 Request 是 <code class=\"language-text\">/articles/7</code>，那麼 <code class=\"language-text\">$article</code> 就會是 <code class=\"language-text\">Article::findOrFail(7)</code>，若該筆資料不存在則會拋出 404。</p>\n<h4 id=\"綁定做了什麼？\"><a href=\"#%E7%B6%81%E5%AE%9A%E5%81%9A%E4%BA%86%E4%BB%80%E9%BA%BC%EF%BC%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>綁定做了什麼？</h4>\n<p>那麼 <code class=\"language-text\">bind</code> 做了什麼事呢？讓我們看一下 Route list：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">+-----------+---------------------------+------------------+----------------------------+\n| Method    | URI                       | Name             | Action                     |\n+-----------+---------------------------+------------------+----------------------------+\n| GET|HEAD  | articles                  | articles.index   | ArticlesController@index   |\n| GET|HEAD  | articles/create           | articles.create  | ArticlesController@create  |\n| POST      | articles                  | articles.store   | ArticlesController@store   |\n| GET|HEAD  | articles/{articles}       | articles.show    | ArticlesController@show    |\n| GET|HEAD  | articles/{articles}/edit  | articles.edit    | ArticlesController@edit    |\n| PUT       | articles/{articles}       | articles.update  | ArticlesController@update  |\n| PATCH     | articles/{articles}       | articles         | ArticlesController@update  |\n| DELETE    | articles/{articles}       | articles.destroy | ArticlesController@destroy |\n+-----------+---------------------------+------------------+----------------------------+</code></pre></div>\n<p>注意到有 <code class=\"language-text\">{articles}</code> 的 Route，這邊的變數 <code class=\"language-text\">articles</code> 也就是我們在 <code class=\"language-text\">bind()</code>傳入的第一個參數，Route Model Binding 會自動在你綁定的 Model（第二個參數 <code class=\"language-text\">\\App\\Article</code>） 搜尋（<code class=\"language-text\">findOrFail</code>）主鍵為 <code class=\"language-text\">{articles}</code> 的資料。所以不只在 <code class=\"language-text\">show</code> method，只要任何有 <code class=\"language-text\">{articles}</code> 的 Route 都會自動做綁定，相當的方便（懶人）。</p>\n<h4 id=\"自定搜尋條件\"><a href=\"#%E8%87%AA%E5%AE%9A%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自定搜尋條件</h4>\n<p>有些情況並不適用於預設的 <code class=\"language-text\">Model::findOrFail($id)</code>，例如只希望找出已經發佈的 Article，這時候可以改變 <code class=\"language-text\">bind()</code> 的第二個參數為包含自訂搜尋的條件的 Closure：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span>Router <span class=\"token variable\">$router</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">parent</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$router</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$router</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'articles'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> \\<span class=\"token package\">App<span class=\"token punctuation\">\\</span>Article</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'published_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&lt;='</span><span class=\"token punctuation\">,</span> Carbon<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">findOrFail</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>到此你已經瞭解如何運用 Route Model Binding 囉！未來如果搭上 Form Model binding 在開發上會更加的快速（懶人）！</p>","fields":{"slug":"/2015/07/23/use-route-model-binding-in-laravel/"},"frontmatter":{"date":"2015-07-23T16:56:49.000Z","title":"在 Laravel 使用 Route Model Binding"}}},{"node":{"html":"<blockquote>\n<p>本文適用於 Laravel 5.0 以上版本。</p>\n</blockquote>\n<h4 id=\"什麼是-pjax-？\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-pjax-%EF%BC%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 PJAX ？</h4>\n<p>簡單來說，以往使用的 <code class=\"language-text\">AJAX</code> 可以不重新載入網頁，異步載入伺服器的資料，並更新畫面。而 <code class=\"language-text\">PJAX</code> 則是加入了 HTML5 的 <code class=\"language-text\">PushState</code> 技術，在取得資料的同時改變 Url，可以保留瀏覽器上一頁的功能，而且不會從伺服器重新載入 js 及 css 之類的靜態檔案，加快網頁的載入速度。</p>\n<!-- more -->\n<h4 id=\"開始上手\"><a href=\"#%E9%96%8B%E5%A7%8B%E4%B8%8A%E6%89%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始上手</h4>\n<h5 id=\"伺服器端安裝-jacobbennettpjax\"><a href=\"#%E4%BC%BA%E6%9C%8D%E5%99%A8%E7%AB%AF%E5%AE%89%E8%A3%9D-jacobbennettpjax\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>伺服器端安裝 <code class=\"language-text\">jacobbennett/pjax</code></h5>\n<p>在 Laravel 我們需要安裝 <code class=\"language-text\">jacobbennett/pjax</code> 這隻 Package（<a href=\"https://github.com/JacobBennett/pjax\">Github</a>），他會根據 Request 是否為 PJAX 來回傳對應資料。安裝請直接修改 <code class=\"language-text\">composer.json</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token string\">\"require\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token string\">\"jacobbennett/pjax\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0.*\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>接著執行 <code class=\"language-text\">composer update</code> 或是 <code class=\"language-text\">composer install</code> 安裝 package。</p>\n<p>安裝完成後，我們要把 <code class=\"language-text\">jacobbennett/pjax</code> 的 middleware 加到我們預設的 middleware 中，打開 <code class=\"language-text\">app/Http/Kernel.php</code>，在 <code class=\"language-text\">$middleware</code> 增加：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$middleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token single-quoted-string string\">'JacobBennett\\Pjax\\PjaxMiddleware'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>這樣 Laravel 的部分就準備完成了。</p>\n<h5 id=\"前端安裝-jquerypjax\"><a href=\"#%E5%89%8D%E7%AB%AF%E5%AE%89%E8%A3%9D-jquerypjax\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前端安裝 <code class=\"language-text\">jQuery.pjax</code></h5>\n<p>前端部分使用 <code class=\"language-text\">jQuery.pjax</code> 這隻 Library，<code class=\"language-text\">jQuery.pjax</code> 是基於 jQuery，並封裝了 pushState 與 AJAX ，讓你更容易使用 PJAX 的 Library，關於此 Library 可以參閱 <a href=\"https://github.com/defunkt/jquery-pjax\">jQuery.pjax 的 Github</a>。另外 <code class=\"language-text\">jQuery.pjax</code> 依賴於 <code class=\"language-text\">jQuery 1.8.x</code> 以上，所以安裝前請確保你的專案有載入 <code class=\"language-text\">jQuery</code>。</p>\n<p>下載 <code class=\"language-text\">jquery.pjax.js</code> 至你的專案中，本範例下載至專案的 <code class=\"language-text\">/public/javascripts</code> 資料夾，我習慣使用 <code class=\"language-text\">wget</code>，你可以使用你習慣的方式下載，像是 <code class=\"language-text\">curl</code> 或是直接用瀏覽器：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">wget</span> -P public/javascripts https://raw.github.com/defunkt/jquery-pjax/master/jquery.pjax.js</code></pre></div>\n<p>接著在你的 <code class=\"language-text\">views</code> 中載入檔案：</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{{ assets(<span class=\"token punctuation\">'</span>javascripts/jquery.pjax.js<span class=\"token punctuation\">'</span>) }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>最後增加 JavaScript：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上方程式的第一個參數代表會攔截所有的 <code class=\"language-text\">a</code> 標籤，若瀏覽器有支援就改以 PJAX 的方式送出，第二個參數代表接收到的資料替換至 <code class=\"language-text\">body</code>。</p>\n<p>另外，PushState 有瀏覽器支援的問題（萬惡的 IE），支援度可以至 <a href=\"http://caniuse.com/#search=pushstate\">Can I use</a> 查看，不過這不用擔心，若瀏覽器不支援 PushState，就會以原始方式打開超連結。</p>\n<h4 id=\"完成！\"><a href=\"#%E5%AE%8C%E6%88%90%EF%BC%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完成！</h4>\n<p>完成上面的步驟後你的專案就擁有 PJAX 的功能了，打開 Devtools 的 Network 畫面，點擊任一 <code class=\"language-text\">a</code> 標籤，就會看到帶有 <code class=\"language-text\">_pjax=body</code> 的 Request ，接著畫面就會更新了！</p>\n<p><img src=\"http://i.imgur.com/xrKP9S0.png\"></p>\n<h4 id=\"加上載入動畫\"><a href=\"#%E5%8A%A0%E4%B8%8A%E8%BC%89%E5%85%A5%E5%8B%95%E7%95%AB\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>加上載入動畫</h4>\n<p>不過這樣的 UX 不是很好，有時點擊連結後有某些原因造成等待的時間較久，使用者可能覺得沒反應就會重新載入，或是重複點擊，這樣的效果並不好，所以我們要加上載入動畫，實作效果可以參考 Youtube（下圖畫面上方的紅色讀取條）。</p>\n<p><img src=\"http://i.imgur.com/rXvQMSS.png\"></p>\n<h6 id=\"安裝-nprogressjs\"><a href=\"#%E5%AE%89%E8%A3%9D-nprogressjs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安裝 nprogress.js</h6>\n<p><code class=\"language-text\">nprogress.js</code> 是一個載入動畫的 Library，效果可以參考<a href=\"http://ricostacruz.com/nprogress/\">它的官方網站</a>，也可在<a href=\"https://github.com/rstacruz/nprogress\">它的 Github</a> 參考使用的 API。</p>\n<p>下載檔案至專案中：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">wget</span> -P public/javascripts http://ricostacruz.com/nprogress/nprogress.js\n$ <span class=\"token function\">wget</span> -P public/stylesheets http://ricostacruz.com/nprogress/nprogress.css</code></pre></div>\n<p>接著在 <code class=\"language-text\">views</code> 載入檔案：</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{{ asset(<span class=\"token punctuation\">'</span>stylesheets/nprogress.css<span class=\"token punctuation\">'</span>) }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{{ assets(<span class=\"token punctuation\">'</span>javascripts/nprogress.js<span class=\"token punctuation\">'</span>) }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>最後把效果加到 PJAX 的生命週期中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pjax:start'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        NProgress<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pjax:end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        NProgress<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h6 id=\"噹啷！完成！\"><a href=\"#%E5%99%B9%E5%95%B7%EF%BC%81%E5%AE%8C%E6%88%90%EF%BC%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>噹啷！完成！</h6>\n<p>至此你的專案已經擁有完整的 PJAX 了！</p>\n<h4 id=\"q--a：\"><a href=\"#q--a%EF%BC%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q &#x26; A：</h4>\n<p>Q：我不喜歡 nprogress 的效果，有沒有別的可以用？\nA：你可以考慮使用 <a href=\"http://github.hubspot.com/pace/docs/welcome/\">PACE</a>、<a href=\"http://usablica.github.io/progress.js/\">Progress.js</a>，不過我都沒使用過，但方式應該是大同小異。</p>\n<p>Q：為什麼我的一些 JavaScript Library 會爆掉沒反應？\nA：你使用的 Library 如果需要在畫面載入完時重新初始化（像是 <a href=\"http://portfoliojs.com/\">portfolio.js</a>），請把相關程式碼放入 <code class=\"language-text\">PJAX</code> 的生命週期中，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pjax:end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">initPortfolio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    NProgress<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有其他問題也可以留言，我會盡力幫助你的 :)</p>\n<p>References: <a href=\"https://phphub.org/topics/44\">PHPHub</a></p>","fields":{"slug":"/2015/06/22/using-pjax-with-laravel-5/"},"frontmatter":{"date":"2015-06-22T11:50:48.000Z","title":"在 Laravel 5 使用 PJAX 加快網頁載入速度"}}}]}},"pageContext":{}}