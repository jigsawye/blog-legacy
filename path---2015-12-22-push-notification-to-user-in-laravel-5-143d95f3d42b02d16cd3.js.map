{"version":3,"sources":["webpack:///path---2015-12-22-push-notification-to-user-in-laravel-5-143d95f3d42b02d16cd3.js","webpack:///./.cache/json/2015-12-22-push-notification-to-user-in-laravel-5.json"],"names":["webpackJsonp","456","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,WAAAC,OAAA,YAAuCC,gBAAmBC,GAAA,6IAAAC,KAAA,qi4BAAqs4BC,aAAo5BL,MAAA,wBAAAM,KAAA,uBAA6DC,aAAgBC,KAAA","file":"path---2015-12-22-push-notification-to-user-in-laravel-5-143d95f3d42b02d16cd3.js","sourcesContent":["webpackJsonp([213265620909541],{\n\n/***/ 456:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"JIGSAWYE\",\"author\":\"Evan Ye\"}},\"markdownRemark\":{\"id\":\"/Users/jigsawye/projects/gatsby-blog/content/posts/2015-12-22-push-notification-to-user-in-laravel-5.md absPath of file >>> MarkdownRemark\",\"html\":\"<blockquote>\\n<p>更新於 2017/1/10：Laravel 官方已推出 <a href=\\\"https://laravel.com/docs/5.3/broadcasting#receiving-broadcasts\\\">Laravel Echo</a>，可簡化整個建置流程，有興趣可前往參考。</p>\\n</blockquote>\\n<p>今天在逛 <a href=\\\"https://phphub.org\\\">PHPHub</a> 時剛好看到<a href=\\\"https://phphub.org/topics/1585\\\">這篇</a>，想著之前也想做類似 Facebook 的通知服務，剛好之前也有碰過一陣子的 socket.io，所以就試著實做看看了。不過推播通知在手機上是相當常見的，但在 Web 上不知為何卻相當少見，也可能是我見識太淺了，看過的網站太少XD。</p>\\n<p><a href=\\\"https://github.com/jigsawye/laravel-push-notification-demo\\\">本文的原始碼</a></p>\\n<!-- more -->\\n<!-- toc -->\\n<h3 id=\\\"起手式\\\"><a href=\\\"#%E8%B5%B7%E6%89%8B%E5%BC%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>起手式</h3>\\n<p>首先我們需要先建 Laravel 專案：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ laravel new notification\\n$ <span class=\\\"token function\\\">cd</span> notification\\n$ composer <span class=\\\"token function\\\">install</span>\\n$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span></code></pre>\\n      </div>\\n<p>設定你的 <code class=\\\"language-text\\\">.env</code>，除了資料庫外我們還會使用到<strong>隊列（Queue）</strong>及<strong>廣播（broadcast）</strong>，看起來會像：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash .env\\\"><code class=\\\"language-bash .env\\\">...\\nQUEUE_DRIVER=redis\\nBROADCAST_DRIVER=redis\\n...</code></pre>\\n      </div>\\n<p>要使用 Redis 必須在 Composer 安裝 <code class=\\\"language-text\\\">predis/predis</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ composer require predis/predis</code></pre>\\n      </div>\\n<p>接著執行遷移，跟 5.2 提供的 Auth scaffold（幫我們把 Auth 的部分連 View 都建完）：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ php artisan migrate\\n$ php artisan make:auth</code></pre>\\n      </div>\\n<p>試試看應用程式有沒有正常執行，最後新增兩個使用者，看要在瀏覽器直接建立，或是其他方式也可以。</p>\\n<h3 id=\\\"什麼是隊列\\\"><a href=\\\"#%E4%BB%80%E9%BA%BC%E6%98%AF%E9%9A%8A%E5%88%97\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什麼是隊列</h3>\\n<p><a href=\\\"https://laravel.tw/docs/5.1/queues#introduction\\\">隊列</a>簡單來說就像是 JavaScript 的非同步機制，讓你把一個耗時的工作丟給別人做，你的程式會跳過這部分繼續執行。最常見到的案例就是寄 e-mail 跟簡訊。</p>\\n<h3 id=\\\"什麼是廣播\\\"><a href=\\\"#%E4%BB%80%E9%BA%BC%E6%98%AF%E5%BB%A3%E6%92%AD\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什麼是廣播</h3>\\n<p>我們會利用 Laravel 的<a href=\\\"https://laravel.tw/docs/5.1/events#broadcasting-events\\\">廣播事件</a>做推送通知的服務，開始之前建議大概瀏覽一下文件，廣播的方式大概如下圖：</p>\\n<p>{% asset_img 01.png %}</p>\\n<p>流程如下：</p>\\n<ul>\\n<li>在 Laravel 執行一個推播通知事件</li>\\n<li>推播通知事件的資訊會推送至 Redis 中</li>\\n<li>Node 端會訂閱該 Redis 的頻道，接收到推播通知事件的資訊</li>\\n<li>透過 websocket 將推播通知送給使用者</li>\\n</ul>\\n<h3 id=\\\"建立推播通知事件\\\"><a href=\\\"#%E5%BB%BA%E7%AB%8B%E6%8E%A8%E6%92%AD%E9%80%9A%E7%9F%A5%E4%BA%8B%E4%BB%B6\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>建立推播通知事件</h3>\\n<p>首先先讓我們建立一個推播通知事件，所有的推播都會透過此事件推送到 Redis：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ php artisan make:event PushNotification</code></pre>\\n      </div>\\n<p>程式碼如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php app/events/pushnotification.php\\\"><code class=\\\"language-php app/events/pushnotification.php\\\">&lt;?php\\n\\nnamespace App\\\\Events;\\n\\nuse App\\\\Events\\\\Event;\\nuse App\\\\User;\\nuse Illuminate\\\\Queue\\\\SerializesModels;\\nuse Illuminate\\\\Contracts\\\\Broadcasting\\\\ShouldBroadcast;\\n\\nclass PushNotification extends Event implements ShouldBroadcast\\n{\\n    use SerializesModels;\\n\\n    /**\\n     * @var string\\n     */\\n    public $token;\\n\\n    /**\\n     * @var string\\n     */\\n    public $message;\\n\\n\\n    /**\\n     * Create a new event instance.\\n     *\\n     * @param User $user\\n     * @param      $message\\n     */\\n    public function __construct(User $user, $message)\\n    {\\n        $this-&gt;token = sha1($user-&gt;id . &#39;|&#39; . $user-&gt;email);\\n        $this-&gt;message = $message;\\n    }\\n\\n\\n    /**\\n     * Get the channels the event should be broadcast on.\\n     *\\n     * @return array\\n     */\\n    public function broadcastOn()\\n    {\\n        return [&#39;notification&#39;];\\n    }\\n}</code></pre>\\n      </div>\\n<p>我們的事件會有兩個屬性，一個是要推播的 <code class=\\\"language-text\\\">message</code>，另一個比較特別的則是 <code class=\\\"language-text\\\">token</code>。<code class=\\\"language-text\\\">token</code> 會作為 socket.io 中 room 的名稱，代表一個使用者。也就是說一個使用者只會有一個 room（<code class=\\\"language-text\\\">token</code>），這麼做可以讓我們指定要推播給哪個使用者。</p>\\n<p><code class=\\\"language-text\\\">broadcastOn</code> 則是設定在 Redis 中的頻道名稱，我們會在 socket.io server 端透過這個名稱來訂閱由此事件傳遞的資訊。</p>\\n<p>若不太明白可以先接著往下看，會有更詳細的說明。</p>\\n<blockquote>\\n<p><code class=\\\"language-text\\\">token</code> 的雜湊方式可以隨你喜歡更改，但要確定每次雜湊出來的值都相同，因為我們在 render view 給使用者的時候也會雜湊一組 token 給前端的 JavaScript，以加入 socket.io 中特定的 room。</p>\\n</blockquote>\\n<h3 id=\\\"建立-socketio-server\\\"><a href=\\\"#%E5%BB%BA%E7%AB%8B-socketio-server\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>建立 Socket.io Server</h3>\\n<p>我們的 socket.io 會有兩個任務：</p>\\n<ul>\\n<li>接收由 Laravel 的 PushNotification 事件送來的推播資訊</li>\\n<li>將內容透過 websocket 推播給使用者</li>\\n</ul>\\n<p>讓我們先使用 npm 安裝必要的套件：分別是 <code class=\\\"language-text\\\">express</code>（http server）、<code class=\\\"language-text\\\">socket.io</code>（websocket server）及 <code class=\\\"language-text\\\">ioredis</code>（訂閱 redis）：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> express socket.io ioredis --save</code></pre>\\n      </div>\\n<p>接著我們建立 <code class=\\\"language-text\\\">socket.js</code>，先寫 redis 部份的程式碼測試與 Laravel 廣播事件的串接是否有問題：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js socket.js\\\"><code class=\\\"language-js socket.js\\\">var Redis = require(&#39;ioredis&#39;);\\nvar redis = new Redis();\\n\\n// 訂閱 redis 的 notification 頻道，也就是我們在事件中 broadcastOn 所設定的\\nredis.subscribe(&#39;notification&#39;, function(err, count) {\\n  console.log(&#39;connect!&#39;);\\n});\\n\\n// 當該頻道接收到訊息時就列在 terminal 上\\nredis.on(&#39;message&#39;, function(channel, notification) {\\n  console.log(notification);\\n});</code></pre>\\n      </div>\\n<h6 id=\\\"測試與-laravel-是否正確串接\\\"><a href=\\\"#%E6%B8%AC%E8%A9%A6%E8%88%87-laravel-%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A2%BA%E4%B8%B2%E6%8E%A5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>測試與 Laravel 是否正確串接</h6>\\n<p>首先你必須先確認這些東西有沒有執行：</p>\\n<ul>\\n<li>Laravel Application（Nginx or <code class=\\\"language-text\\\">php artisan serve</code>）</li>\\n<li>Redis server</li>\\n<li>隊列監聽器（<code class=\\\"language-text\\\">php artisan queue:listen</code>）</li>\\n<li>socket.io server（<code class=\\\"language-text\\\">node socket.js</code>）</li>\\n</ul>\\n<p>確認完畢後，我們進入 Laravel 的 Tinker 做測試：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ php artisan tinker</code></pre>\\n      </div>\\n<p>{% asset_img test-event.gif %}</p>\\n<p>我們直接觸發事件：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token function\\\">event</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Events<span class=\\\"token punctuation\\\">\\\\</span>PushNotification</span><span class=\\\"token punctuation\\\">(</span>App\\\\<span class=\\\"token package\\\">User</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">first</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'banana!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>你應該在 node 的 terminal 看到：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"event\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"App\\\\\\\\Events\\\\\\\\PushNotification\\\"</span>,<span class=\\\"token string\\\">\\\"data\\\"</span>:<span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"token\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"long-hash-string\\\"</span>,<span class=\\\"token string\\\">\\\"message\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"banana!\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"連接前端與-socketio\\\"><a href=\\\"#%E9%80%A3%E6%8E%A5%E5%89%8D%E7%AB%AF%E8%88%87-socketio\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>連接前端與 socket.io</h3>\\n<h6 id=\\\"前端\\\"><a href=\\\"#%E5%89%8D%E7%AB%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>前端</h6>\\n<p>首先我們必須先安裝 <code class=\\\"language-text\\\">socket.io-client</code>，這是 socket.io 在前端所使用的套件，我們會透過 server side 的開發方式，再透過 elixir 的 browserify 轉成前端可執行的 JavaScript。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> socket.io-client --save</code></pre>\\n      </div>\\n<p>建立 <code class=\\\"language-text\\\">resources/assets/js/app.js</code>，撰寫以下程式碼：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js resources/assets/js/app.js\\\"><code class=\\\"language-js resources/assets/js/app.js\\\">var io = require(&#39;socket.io-client&#39;);\\n\\n// 建立 socket.io 的連線\\nvar notification = io.connect(&#39;http://localhost:3000&#39;);\\n\\n// 當從 socket.io server 收到 notification 時將訊息印在 console 上\\nnotification.on(&#39;notification&#39;, function(message) {\\n  console.log(message);\\n});</code></pre>\\n      </div>\\n<p>接著修改 <code class=\\\"language-text\\\">gulpfile.js</code>，然後執行 <code class=\\\"language-text\\\">gulp</code>，他會將編譯結果放在 <code class=\\\"language-text\\\">public/js/app.js</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js gulpfile.js\\\"><code class=\\\"language-js gulpfile.js\\\">elixir(function(mix) {\\n    mix.browserify(&#39;app.js&#39;);\\n});</code></pre>\\n      </div>\\n<p>接著我們希望在 <code class=\\\"language-text\\\">/home</code> 能接收推播（5.2 的 <code class=\\\"language-text\\\">make:auth</code> 預設提供 <code class=\\\"language-text\\\">/home</code> 作為登入後的首頁），所以先在 <code class=\\\"language-text\\\">resources/views/layouts/app.blade.php</code> 下方加上 <code class=\\\"language-text\\\">@yield(&#39;scripts&#39;)</code> ，看起來會像這樣：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html resources/views/layouts/app.blade.php\\\"><code class=\\\"language-html resources/views/layouts/app.blade.php\\\">    ...\\n        &lt;/div&gt;\\n    &lt;/nav&gt;\\n\\n    @yield(&#39;content&#39;)\\n\\n    @yield(&#39;scripts&#39;)\\n\\n    &lt;!-- JavaScripts --&gt;\\n    {{-- &lt;script src=&quot;{{ elixir(&#39;js/app.js&#39;) }}&quot;&gt;&lt;/script&gt; --}}\\n    ...</code></pre>\\n      </div>\\n<p>然後在 <code class=\\\"language-text\\\">resources/views/home.blade.php</code> 下面載入剛剛寫好的 JavaScript：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html resources/views/home.blade.php\\\"><code class=\\\"language-html resources/views/home.blade.php\\\">@section(&#39;content&#39;)\\n&lt;script src=&quot;/js/app.js&quot;&gt;&lt;/script&gt;\\n@endsection</code></pre>\\n      </div>\\n<h6 id=\\\"後端\\\"><a href=\\\"#%E5%BE%8C%E7%AB%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>後端</h6>\\n<p>修改剛剛的 <code class=\\\"language-text\\\">socket.js</code>，增加 socket.io 及推送通知至前端的程式碼：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js socket.js\\\"><code class=\\\"language-js socket.js\\\">var app = require(&#39;express&#39;);\\nvar http = require(&#39;http&#39;).Server(app);\\nvar io = require(&#39;socket.io&#39;)(http);\\nvar Redis = require(&#39;ioredis&#39;);\\nvar redis = new Redis();\\n\\nredis.subscribe(&#39;notification&#39;, function(err, count) {\\n  console.log(&#39;connect!&#39;);\\n});\\n\\nredis.on(&#39;message&#39;, function(channel, notification) {\\n  console.log(notification);\\n  notification = JSON.parse(notification);\\n\\n  // 將訊息推播給使用者\\n  io.emit(&#39;notification&#39;, notification.data.message);\\n});\\n\\n// 監聽 3000 port\\nhttp.listen(3000, function() {\\n  console.log(&#39;Listening on Port 3000&#39;);\\n});</code></pre>\\n      </div>\\n<p>接著就可以測試前端是否可以收到通知了！</p>\\n<p>{% asset_img test-socket.gif %}</p>\\n<h3 id=\\\"區分使用者\\\"><a href=\\\"#%E5%8D%80%E5%88%86%E4%BD%BF%E7%94%A8%E8%80%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>區分使用者</h3>\\n<p>如果你有開不同瀏覽器登入不同使用者的話會發現，不管你在事件的 <code class=\\\"language-text\\\">User</code> 傳入誰，每個使用者都會收到通知。</p>\\n<p>因為所有使用者都屬於同一個 channel（<code class=\\\"language-text\\\">notification</code>）。這時就要使用 <code class=\\\"language-text\\\">token</code> 及 socket.io 的 room 來區分使用者。每個 <code class=\\\"language-text\\\">token</code> 代表一個 room，也就是一個使用者，我們就可以由 Laravel 廣播事件內的 token 決定要接推播通知傳給哪個使用者：</p>\\n<p>{% asset_img 02.png %}</p>\\n<h6 id=\\\"前端-1\\\"><a href=\\\"#%E5%89%8D%E7%AB%AF-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>前端</h6>\\n<p>我們要做的事情有：</p>\\n<ul>\\n<li>在 Controller 產生 <code class=\\\"language-text\\\">token</code>（與事件中的相同），並傳遞至 View</li>\\n<li>前端的 JavaScript 取得 <code class=\\\"language-text\\\">token</code>，並傳給 socket.io server 加入指定的 room</li>\\n</ul>\\n<p>首先，先修改 <code class=\\\"language-text\\\">HomeControllr@index</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php app/http/controllers/homecontrollr.php\\\"><code class=\\\"language-php app/http/controllers/homecontrollr.php\\\">/**\\n * Show the application dashboard.\\n *\\n * @return Response\\n */\\npublic function index(Request $request)\\n{\\n    $user = $request-&gt;user();\\n    $token = sha1($user-&gt;id . &#39;|&#39; . $user-&gt;email);\\n\\n    return view(&#39;home&#39;, compact(&#39;token&#39;));\\n}</code></pre>\\n      </div>\\n<p>接著修改剛剛新增在 <code class=\\\"language-text\\\">resources/views/home.blade.php</code> 的部分，將 <code class=\\\"language-text\\\">token</code> 傳至 JavaScript 中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html resources/views/home.blade.php\\\"><code class=\\\"language-html resources/views/home.blade.php\\\">...\\n@section(&#39;content&#39;)\\n&lt;script&gt;\\n    Notification.TOKEN = &#39;{{ $token or null }}&#39;;\\n&lt;/script&gt;\\n&lt;script src=&quot;/js/app.js&quot;&gt;&lt;/script&gt;\\n@endsection</code></pre>\\n      </div>\\n<p>修改 <code class=\\\"language-text\\\">resources/assets/js/app.js</code>，使用 <code class=\\\"language-text\\\">token</code> 加入使用者的 room：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js resources/assets/js/app.js\\\"><code class=\\\"language-js resources/assets/js/app.js\\\">var io = require(&#39;socket.io-client&#39;);\\n\\nvar notification = io.connect(&#39;http://localhost:3000&#39;);\\n\\n// 當連接到 socket.io server 時觸發 set-token 設定使用者的 room\\nnotification.on(&#39;connect&#39;, function() {\\n  notification.emit(&#39;set-token&#39;, Notification.TOKEN);\\n});\\n\\nnotification.on(&#39;notification&#39;, function(message) {\\n  console.log(message);\\n});</code></pre>\\n      </div>\\n<h6 id=\\\"後端-1\\\"><a href=\\\"#%E5%BE%8C%E7%AB%AF-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>後端</h6>\\n<p>修改 <code class=\\\"language-text\\\">socket.js</code>，讓使用者加入屬於他的 room，並由 Laravel 廣播事件資訊內的 token 決定要傳給哪個使用者（room）：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'express'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Server</span><span class=\\\"token punctuation\\\">(</span>app<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> io <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'socket.io'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>http<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> Redis <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ioredis'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> redis <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Redis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nredis<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subscribe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'notification'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'connect!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nio<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'connection'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>socket<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 當使用者觸發 set-token 時將他加入屬於他的 room</span>\\n  socket<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'set-token'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    socket<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token:'</span> <span class=\\\"token operator\\\">+</span> token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nredis<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'message'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>channel<span class=\\\"token punctuation\\\">,</span> notification<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>notification<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  notification <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">JSON</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>notification<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 使用 to() 指定傳送的 room，也就是傳遞給指定的使用者</span>\\n  io<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">to</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token:'</span> <span class=\\\"token operator\\\">+</span> notification<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'notification'</span><span class=\\\"token punctuation\\\">,</span> notification<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 監聽 3000 port</span>\\nhttp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Listening on Port 3000'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"demo\\\"><a href=\\\"#demo\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Demo</h3>\\n<p>{% asset_img demo.gif %}</p>\\n<p>基本上前端收的到通知之後，如何呈現就不是困難的問題了。</p>\\n<p><a href=\\\"https://github.com/jigsawye/laravel-push-notification-demo\\\">本文的原始碼</a></p>\\n<h3 id=\\\"後記\\\"><a href=\\\"#%E5%BE%8C%E8%A8%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>後記</h3>\\n<p>實作其實沒那麼困難，不過如果真的要上 Production 的話還是得再思考一下！因為感覺這個 Solution 沒有很透徹XD！</p>\\n<p>像是 token 的部分這樣安全性不知道會不會不佳，如果想更安全可以用更複雜的演算法，或是在 Laravel 跟 socket.io server 用相同的加密演算法，互相加解密也可以。作法應該還很多種，有厲害的大大還麻煩幫忙補充XD</p>\",\"frontmatter\":{\"title\":\"在 laravel 5 實作瀏覽器推播通知\",\"date\":\"December 22, 2015\"}}},\"pathContext\":{\"slug\":\"/2015/12/22/push-notification-to-user-in-laravel-5/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2015-12-22-push-notification-to-user-in-laravel-5-143d95f3d42b02d16cd3.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"JIGSAWYE\",\"author\":\"Evan Ye\"}},\"markdownRemark\":{\"id\":\"/Users/jigsawye/projects/gatsby-blog/content/posts/2015-12-22-push-notification-to-user-in-laravel-5.md absPath of file >>> MarkdownRemark\",\"html\":\"<blockquote>\\n<p>更新於 2017/1/10：Laravel 官方已推出 <a href=\\\"https://laravel.com/docs/5.3/broadcasting#receiving-broadcasts\\\">Laravel Echo</a>，可簡化整個建置流程，有興趣可前往參考。</p>\\n</blockquote>\\n<p>今天在逛 <a href=\\\"https://phphub.org\\\">PHPHub</a> 時剛好看到<a href=\\\"https://phphub.org/topics/1585\\\">這篇</a>，想著之前也想做類似 Facebook 的通知服務，剛好之前也有碰過一陣子的 socket.io，所以就試著實做看看了。不過推播通知在手機上是相當常見的，但在 Web 上不知為何卻相當少見，也可能是我見識太淺了，看過的網站太少XD。</p>\\n<p><a href=\\\"https://github.com/jigsawye/laravel-push-notification-demo\\\">本文的原始碼</a></p>\\n<!-- more -->\\n<!-- toc -->\\n<h3 id=\\\"起手式\\\"><a href=\\\"#%E8%B5%B7%E6%89%8B%E5%BC%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>起手式</h3>\\n<p>首先我們需要先建 Laravel 專案：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ laravel new notification\\n$ <span class=\\\"token function\\\">cd</span> notification\\n$ composer <span class=\\\"token function\\\">install</span>\\n$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span></code></pre>\\n      </div>\\n<p>設定你的 <code class=\\\"language-text\\\">.env</code>，除了資料庫外我們還會使用到<strong>隊列（Queue）</strong>及<strong>廣播（broadcast）</strong>，看起來會像：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash .env\\\"><code class=\\\"language-bash .env\\\">...\\nQUEUE_DRIVER=redis\\nBROADCAST_DRIVER=redis\\n...</code></pre>\\n      </div>\\n<p>要使用 Redis 必須在 Composer 安裝 <code class=\\\"language-text\\\">predis/predis</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ composer require predis/predis</code></pre>\\n      </div>\\n<p>接著執行遷移，跟 5.2 提供的 Auth scaffold（幫我們把 Auth 的部分連 View 都建完）：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ php artisan migrate\\n$ php artisan make:auth</code></pre>\\n      </div>\\n<p>試試看應用程式有沒有正常執行，最後新增兩個使用者，看要在瀏覽器直接建立，或是其他方式也可以。</p>\\n<h3 id=\\\"什麼是隊列\\\"><a href=\\\"#%E4%BB%80%E9%BA%BC%E6%98%AF%E9%9A%8A%E5%88%97\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什麼是隊列</h3>\\n<p><a href=\\\"https://laravel.tw/docs/5.1/queues#introduction\\\">隊列</a>簡單來說就像是 JavaScript 的非同步機制，讓你把一個耗時的工作丟給別人做，你的程式會跳過這部分繼續執行。最常見到的案例就是寄 e-mail 跟簡訊。</p>\\n<h3 id=\\\"什麼是廣播\\\"><a href=\\\"#%E4%BB%80%E9%BA%BC%E6%98%AF%E5%BB%A3%E6%92%AD\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什麼是廣播</h3>\\n<p>我們會利用 Laravel 的<a href=\\\"https://laravel.tw/docs/5.1/events#broadcasting-events\\\">廣播事件</a>做推送通知的服務，開始之前建議大概瀏覽一下文件，廣播的方式大概如下圖：</p>\\n<p>{% asset_img 01.png %}</p>\\n<p>流程如下：</p>\\n<ul>\\n<li>在 Laravel 執行一個推播通知事件</li>\\n<li>推播通知事件的資訊會推送至 Redis 中</li>\\n<li>Node 端會訂閱該 Redis 的頻道，接收到推播通知事件的資訊</li>\\n<li>透過 websocket 將推播通知送給使用者</li>\\n</ul>\\n<h3 id=\\\"建立推播通知事件\\\"><a href=\\\"#%E5%BB%BA%E7%AB%8B%E6%8E%A8%E6%92%AD%E9%80%9A%E7%9F%A5%E4%BA%8B%E4%BB%B6\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>建立推播通知事件</h3>\\n<p>首先先讓我們建立一個推播通知事件，所有的推播都會透過此事件推送到 Redis：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ php artisan make:event PushNotification</code></pre>\\n      </div>\\n<p>程式碼如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php app/events/pushnotification.php\\\"><code class=\\\"language-php app/events/pushnotification.php\\\">&lt;?php\\n\\nnamespace App\\\\Events;\\n\\nuse App\\\\Events\\\\Event;\\nuse App\\\\User;\\nuse Illuminate\\\\Queue\\\\SerializesModels;\\nuse Illuminate\\\\Contracts\\\\Broadcasting\\\\ShouldBroadcast;\\n\\nclass PushNotification extends Event implements ShouldBroadcast\\n{\\n    use SerializesModels;\\n\\n    /**\\n     * @var string\\n     */\\n    public $token;\\n\\n    /**\\n     * @var string\\n     */\\n    public $message;\\n\\n\\n    /**\\n     * Create a new event instance.\\n     *\\n     * @param User $user\\n     * @param      $message\\n     */\\n    public function __construct(User $user, $message)\\n    {\\n        $this-&gt;token = sha1($user-&gt;id . &#39;|&#39; . $user-&gt;email);\\n        $this-&gt;message = $message;\\n    }\\n\\n\\n    /**\\n     * Get the channels the event should be broadcast on.\\n     *\\n     * @return array\\n     */\\n    public function broadcastOn()\\n    {\\n        return [&#39;notification&#39;];\\n    }\\n}</code></pre>\\n      </div>\\n<p>我們的事件會有兩個屬性，一個是要推播的 <code class=\\\"language-text\\\">message</code>，另一個比較特別的則是 <code class=\\\"language-text\\\">token</code>。<code class=\\\"language-text\\\">token</code> 會作為 socket.io 中 room 的名稱，代表一個使用者。也就是說一個使用者只會有一個 room（<code class=\\\"language-text\\\">token</code>），這麼做可以讓我們指定要推播給哪個使用者。</p>\\n<p><code class=\\\"language-text\\\">broadcastOn</code> 則是設定在 Redis 中的頻道名稱，我們會在 socket.io server 端透過這個名稱來訂閱由此事件傳遞的資訊。</p>\\n<p>若不太明白可以先接著往下看，會有更詳細的說明。</p>\\n<blockquote>\\n<p><code class=\\\"language-text\\\">token</code> 的雜湊方式可以隨你喜歡更改，但要確定每次雜湊出來的值都相同，因為我們在 render view 給使用者的時候也會雜湊一組 token 給前端的 JavaScript，以加入 socket.io 中特定的 room。</p>\\n</blockquote>\\n<h3 id=\\\"建立-socketio-server\\\"><a href=\\\"#%E5%BB%BA%E7%AB%8B-socketio-server\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>建立 Socket.io Server</h3>\\n<p>我們的 socket.io 會有兩個任務：</p>\\n<ul>\\n<li>接收由 Laravel 的 PushNotification 事件送來的推播資訊</li>\\n<li>將內容透過 websocket 推播給使用者</li>\\n</ul>\\n<p>讓我們先使用 npm 安裝必要的套件：分別是 <code class=\\\"language-text\\\">express</code>（http server）、<code class=\\\"language-text\\\">socket.io</code>（websocket server）及 <code class=\\\"language-text\\\">ioredis</code>（訂閱 redis）：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> express socket.io ioredis --save</code></pre>\\n      </div>\\n<p>接著我們建立 <code class=\\\"language-text\\\">socket.js</code>，先寫 redis 部份的程式碼測試與 Laravel 廣播事件的串接是否有問題：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js socket.js\\\"><code class=\\\"language-js socket.js\\\">var Redis = require(&#39;ioredis&#39;);\\nvar redis = new Redis();\\n\\n// 訂閱 redis 的 notification 頻道，也就是我們在事件中 broadcastOn 所設定的\\nredis.subscribe(&#39;notification&#39;, function(err, count) {\\n  console.log(&#39;connect!&#39;);\\n});\\n\\n// 當該頻道接收到訊息時就列在 terminal 上\\nredis.on(&#39;message&#39;, function(channel, notification) {\\n  console.log(notification);\\n});</code></pre>\\n      </div>\\n<h6 id=\\\"測試與-laravel-是否正確串接\\\"><a href=\\\"#%E6%B8%AC%E8%A9%A6%E8%88%87-laravel-%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A2%BA%E4%B8%B2%E6%8E%A5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>測試與 Laravel 是否正確串接</h6>\\n<p>首先你必須先確認這些東西有沒有執行：</p>\\n<ul>\\n<li>Laravel Application（Nginx or <code class=\\\"language-text\\\">php artisan serve</code>）</li>\\n<li>Redis server</li>\\n<li>隊列監聽器（<code class=\\\"language-text\\\">php artisan queue:listen</code>）</li>\\n<li>socket.io server（<code class=\\\"language-text\\\">node socket.js</code>）</li>\\n</ul>\\n<p>確認完畢後，我們進入 Laravel 的 Tinker 做測試：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ php artisan tinker</code></pre>\\n      </div>\\n<p>{% asset_img test-event.gif %}</p>\\n<p>我們直接觸發事件：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token function\\\">event</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Events<span class=\\\"token punctuation\\\">\\\\</span>PushNotification</span><span class=\\\"token punctuation\\\">(</span>App\\\\<span class=\\\"token package\\\">User</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">first</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'banana!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>你應該在 node 的 terminal 看到：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"event\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"App\\\\\\\\Events\\\\\\\\PushNotification\\\"</span>,<span class=\\\"token string\\\">\\\"data\\\"</span>:<span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"token\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"long-hash-string\\\"</span>,<span class=\\\"token string\\\">\\\"message\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"banana!\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"連接前端與-socketio\\\"><a href=\\\"#%E9%80%A3%E6%8E%A5%E5%89%8D%E7%AB%AF%E8%88%87-socketio\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>連接前端與 socket.io</h3>\\n<h6 id=\\\"前端\\\"><a href=\\\"#%E5%89%8D%E7%AB%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>前端</h6>\\n<p>首先我們必須先安裝 <code class=\\\"language-text\\\">socket.io-client</code>，這是 socket.io 在前端所使用的套件，我們會透過 server side 的開發方式，再透過 elixir 的 browserify 轉成前端可執行的 JavaScript。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> socket.io-client --save</code></pre>\\n      </div>\\n<p>建立 <code class=\\\"language-text\\\">resources/assets/js/app.js</code>，撰寫以下程式碼：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js resources/assets/js/app.js\\\"><code class=\\\"language-js resources/assets/js/app.js\\\">var io = require(&#39;socket.io-client&#39;);\\n\\n// 建立 socket.io 的連線\\nvar notification = io.connect(&#39;http://localhost:3000&#39;);\\n\\n// 當從 socket.io server 收到 notification 時將訊息印在 console 上\\nnotification.on(&#39;notification&#39;, function(message) {\\n  console.log(message);\\n});</code></pre>\\n      </div>\\n<p>接著修改 <code class=\\\"language-text\\\">gulpfile.js</code>，然後執行 <code class=\\\"language-text\\\">gulp</code>，他會將編譯結果放在 <code class=\\\"language-text\\\">public/js/app.js</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js gulpfile.js\\\"><code class=\\\"language-js gulpfile.js\\\">elixir(function(mix) {\\n    mix.browserify(&#39;app.js&#39;);\\n});</code></pre>\\n      </div>\\n<p>接著我們希望在 <code class=\\\"language-text\\\">/home</code> 能接收推播（5.2 的 <code class=\\\"language-text\\\">make:auth</code> 預設提供 <code class=\\\"language-text\\\">/home</code> 作為登入後的首頁），所以先在 <code class=\\\"language-text\\\">resources/views/layouts/app.blade.php</code> 下方加上 <code class=\\\"language-text\\\">@yield(&#39;scripts&#39;)</code> ，看起來會像這樣：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html resources/views/layouts/app.blade.php\\\"><code class=\\\"language-html resources/views/layouts/app.blade.php\\\">    ...\\n        &lt;/div&gt;\\n    &lt;/nav&gt;\\n\\n    @yield(&#39;content&#39;)\\n\\n    @yield(&#39;scripts&#39;)\\n\\n    &lt;!-- JavaScripts --&gt;\\n    {{-- &lt;script src=&quot;{{ elixir(&#39;js/app.js&#39;) }}&quot;&gt;&lt;/script&gt; --}}\\n    ...</code></pre>\\n      </div>\\n<p>然後在 <code class=\\\"language-text\\\">resources/views/home.blade.php</code> 下面載入剛剛寫好的 JavaScript：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html resources/views/home.blade.php\\\"><code class=\\\"language-html resources/views/home.blade.php\\\">@section(&#39;content&#39;)\\n&lt;script src=&quot;/js/app.js&quot;&gt;&lt;/script&gt;\\n@endsection</code></pre>\\n      </div>\\n<h6 id=\\\"後端\\\"><a href=\\\"#%E5%BE%8C%E7%AB%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>後端</h6>\\n<p>修改剛剛的 <code class=\\\"language-text\\\">socket.js</code>，增加 socket.io 及推送通知至前端的程式碼：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js socket.js\\\"><code class=\\\"language-js socket.js\\\">var app = require(&#39;express&#39;);\\nvar http = require(&#39;http&#39;).Server(app);\\nvar io = require(&#39;socket.io&#39;)(http);\\nvar Redis = require(&#39;ioredis&#39;);\\nvar redis = new Redis();\\n\\nredis.subscribe(&#39;notification&#39;, function(err, count) {\\n  console.log(&#39;connect!&#39;);\\n});\\n\\nredis.on(&#39;message&#39;, function(channel, notification) {\\n  console.log(notification);\\n  notification = JSON.parse(notification);\\n\\n  // 將訊息推播給使用者\\n  io.emit(&#39;notification&#39;, notification.data.message);\\n});\\n\\n// 監聽 3000 port\\nhttp.listen(3000, function() {\\n  console.log(&#39;Listening on Port 3000&#39;);\\n});</code></pre>\\n      </div>\\n<p>接著就可以測試前端是否可以收到通知了！</p>\\n<p>{% asset_img test-socket.gif %}</p>\\n<h3 id=\\\"區分使用者\\\"><a href=\\\"#%E5%8D%80%E5%88%86%E4%BD%BF%E7%94%A8%E8%80%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>區分使用者</h3>\\n<p>如果你有開不同瀏覽器登入不同使用者的話會發現，不管你在事件的 <code class=\\\"language-text\\\">User</code> 傳入誰，每個使用者都會收到通知。</p>\\n<p>因為所有使用者都屬於同一個 channel（<code class=\\\"language-text\\\">notification</code>）。這時就要使用 <code class=\\\"language-text\\\">token</code> 及 socket.io 的 room 來區分使用者。每個 <code class=\\\"language-text\\\">token</code> 代表一個 room，也就是一個使用者，我們就可以由 Laravel 廣播事件內的 token 決定要接推播通知傳給哪個使用者：</p>\\n<p>{% asset_img 02.png %}</p>\\n<h6 id=\\\"前端-1\\\"><a href=\\\"#%E5%89%8D%E7%AB%AF-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>前端</h6>\\n<p>我們要做的事情有：</p>\\n<ul>\\n<li>在 Controller 產生 <code class=\\\"language-text\\\">token</code>（與事件中的相同），並傳遞至 View</li>\\n<li>前端的 JavaScript 取得 <code class=\\\"language-text\\\">token</code>，並傳給 socket.io server 加入指定的 room</li>\\n</ul>\\n<p>首先，先修改 <code class=\\\"language-text\\\">HomeControllr@index</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php app/http/controllers/homecontrollr.php\\\"><code class=\\\"language-php app/http/controllers/homecontrollr.php\\\">/**\\n * Show the application dashboard.\\n *\\n * @return Response\\n */\\npublic function index(Request $request)\\n{\\n    $user = $request-&gt;user();\\n    $token = sha1($user-&gt;id . &#39;|&#39; . $user-&gt;email);\\n\\n    return view(&#39;home&#39;, compact(&#39;token&#39;));\\n}</code></pre>\\n      </div>\\n<p>接著修改剛剛新增在 <code class=\\\"language-text\\\">resources/views/home.blade.php</code> 的部分，將 <code class=\\\"language-text\\\">token</code> 傳至 JavaScript 中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html resources/views/home.blade.php\\\"><code class=\\\"language-html resources/views/home.blade.php\\\">...\\n@section(&#39;content&#39;)\\n&lt;script&gt;\\n    Notification.TOKEN = &#39;{{ $token or null }}&#39;;\\n&lt;/script&gt;\\n&lt;script src=&quot;/js/app.js&quot;&gt;&lt;/script&gt;\\n@endsection</code></pre>\\n      </div>\\n<p>修改 <code class=\\\"language-text\\\">resources/assets/js/app.js</code>，使用 <code class=\\\"language-text\\\">token</code> 加入使用者的 room：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js resources/assets/js/app.js\\\"><code class=\\\"language-js resources/assets/js/app.js\\\">var io = require(&#39;socket.io-client&#39;);\\n\\nvar notification = io.connect(&#39;http://localhost:3000&#39;);\\n\\n// 當連接到 socket.io server 時觸發 set-token 設定使用者的 room\\nnotification.on(&#39;connect&#39;, function() {\\n  notification.emit(&#39;set-token&#39;, Notification.TOKEN);\\n});\\n\\nnotification.on(&#39;notification&#39;, function(message) {\\n  console.log(message);\\n});</code></pre>\\n      </div>\\n<h6 id=\\\"後端-1\\\"><a href=\\\"#%E5%BE%8C%E7%AB%AF-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>後端</h6>\\n<p>修改 <code class=\\\"language-text\\\">socket.js</code>，讓使用者加入屬於他的 room，並由 Laravel 廣播事件資訊內的 token 決定要傳給哪個使用者（room）：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'express'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Server</span><span class=\\\"token punctuation\\\">(</span>app<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> io <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'socket.io'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>http<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> Redis <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ioredis'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> redis <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Redis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nredis<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subscribe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'notification'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'connect!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nio<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'connection'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>socket<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 當使用者觸發 set-token 時將他加入屬於他的 room</span>\\n  socket<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'set-token'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    socket<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token:'</span> <span class=\\\"token operator\\\">+</span> token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nredis<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'message'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>channel<span class=\\\"token punctuation\\\">,</span> notification<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>notification<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  notification <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">JSON</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>notification<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 使用 to() 指定傳送的 room，也就是傳遞給指定的使用者</span>\\n  io<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">to</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token:'</span> <span class=\\\"token operator\\\">+</span> notification<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'notification'</span><span class=\\\"token punctuation\\\">,</span> notification<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 監聽 3000 port</span>\\nhttp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Listening on Port 3000'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"demo\\\"><a href=\\\"#demo\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Demo</h3>\\n<p>{% asset_img demo.gif %}</p>\\n<p>基本上前端收的到通知之後，如何呈現就不是困難的問題了。</p>\\n<p><a href=\\\"https://github.com/jigsawye/laravel-push-notification-demo\\\">本文的原始碼</a></p>\\n<h3 id=\\\"後記\\\"><a href=\\\"#%E5%BE%8C%E8%A8%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>後記</h3>\\n<p>實作其實沒那麼困難，不過如果真的要上 Production 的話還是得再思考一下！因為感覺這個 Solution 沒有很透徹XD！</p>\\n<p>像是 token 的部分這樣安全性不知道會不會不佳，如果想更安全可以用更複雜的演算法，或是在 Laravel 跟 socket.io server 用相同的加密演算法，互相加解密也可以。作法應該還很多種，有厲害的大大還麻煩幫忙補充XD</p>\",\"frontmatter\":{\"title\":\"在 laravel 5 實作瀏覽器推播通知\",\"date\":\"December 22, 2015\"}}},\"pathContext\":{\"slug\":\"/2015/12/22/push-notification-to-user-in-laravel-5/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2015-12-22-push-notification-to-user-in-laravel-5.json\n// module id = 456\n// module chunks = 213265620909541"],"sourceRoot":""}